/*
* generated by Xtext
*/

package org.xtext.example.rmodp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class RmOdpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsModelElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//
		//	elements+=ModelElement*;
		public ParserRule getRule() { return rule; }

		//elements+=ModelElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//ModelElement
		public RuleCall getElementsModelElementParserRuleCall_0() { return cElementsModelElementParserRuleCall_0; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cImportParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSpecParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ModelElement:
		//
		//	Type | Object | PackageDeclaration | Import | Spec;
		public ParserRule getRule() { return rule; }

		//Type | Object | PackageDeclaration | Import | Spec
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Object
		public RuleCall getObjectParserRuleCall_1() { return cObjectParserRuleCall_1; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_2() { return cPackageDeclarationParserRuleCall_2; }

		//Import
		public RuleCall getImportParserRuleCall_3() { return cImportParserRuleCall_3; }

		//Spec
		public RuleCall getSpecParserRuleCall_4() { return cSpecParserRuleCall_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//
		//	SimpleType | Enumeration;
		public ParserRule getRule() { return rule; }

		//SimpleType | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeSimpleTypeCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeSimpleTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeSimpleTypeCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SimpleType:
		//
		//	"type" name=QualifiedName ("extends" superType=[SimpleType])? ("{" properties+=Property* "}")?;
		public ParserRule getRule() { return rule; }

		//"type" name=QualifiedName ("extends" superType=[SimpleType])? ("{" properties+=Property* "}")?
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("extends" superType=[SimpleType])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[SimpleType]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[SimpleType]
		public CrossReference getSuperTypeSimpleTypeCrossReference_2_1_0() { return cSuperTypeSimpleTypeCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeSimpleTypeIDTerminalRuleCall_2_1_0_1() { return cSuperTypeSimpleTypeIDTerminalRuleCall_2_1_0_1; }

		//("{" properties+=Property* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0() { return cPropertiesPropertyParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueItemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueItemsSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueItemsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumeration:
		//
		//	"enum" name=QualifiedName "{" valueItems+=STRING* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=QualifiedName "{" valueItems+=STRING* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//valueItems+=STRING*
		public Assignment getValueItemsAssignment_3() { return cValueItemsAssignment_3; }

		//STRING
		public RuleCall getValueItemsSTRINGTerminalRuleCall_3_0() { return cValueItemsSTRINGTerminalRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsModelElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclaration:
		//
		//	"package" name=QualifiedName "{" elements+=ModelElement* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" elements+=ModelElement* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=ModelElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ModelElement
		public RuleCall getElementsModelElementParserRuleCall_3_0() { return cElementsModelElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEV_specParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIV_specParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCV_specParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNV_specParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTV_specParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCorr_specParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Spec:
		//
		//	EV_spec | IV_spec | CV_spec | NV_spec | TV_spec | Corr_spec;
		public ParserRule getRule() { return rule; }

		//EV_spec | IV_spec | CV_spec | NV_spec | TV_spec | Corr_spec
		public Alternatives getAlternatives() { return cAlternatives; }

		//EV_spec
		public RuleCall getEV_specParserRuleCall_0() { return cEV_specParserRuleCall_0; }

		//IV_spec
		public RuleCall getIV_specParserRuleCall_1() { return cIV_specParserRuleCall_1; }

		//CV_spec
		public RuleCall getCV_specParserRuleCall_2() { return cCV_specParserRuleCall_2; }

		//NV_spec
		public RuleCall getNV_specParserRuleCall_3() { return cNV_specParserRuleCall_3; }

		//TV_spec
		public RuleCall getTV_specParserRuleCall_4() { return cTV_specParserRuleCall_4; }

		//Corr_spec
		public RuleCall getCorr_specParserRuleCall_5() { return cCorr_specParserRuleCall_5; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cObjectTypeAlternatives_0_0 = (Alternatives)cObjectTypeAssignment_0.eContents().get(0);
		private final Keyword cObjectTypeEV_ObjectKeyword_0_0_0 = (Keyword)cObjectTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cObjectTypeIV_ObjectKeyword_0_0_1 = (Keyword)cObjectTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cObjectTypeCV_ObjectKeyword_0_0_2 = (Keyword)cObjectTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cObjectTypeNV_ObjectKeyword_0_0_3 = (Keyword)cObjectTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cObjectTypeTV_ObjectKeyword_0_0_4 = (Keyword)cObjectTypeAlternatives_0_0.eContents().get(4);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperObjectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperObjectObjectCrossReference_2_1_0 = (CrossReference)cSuperObjectAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperObjectObjectQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperObjectObjectCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStateMachineAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStateMachineStateMachineParserRuleCall_5_1_0 = (RuleCall)cStateMachineAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cInterfacesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInterfacesInterfaceParserRuleCall_6_0 = (RuleCall)cInterfacesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLessThanSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInnerObjectsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInnerObjectsObjectParserRuleCall_7_1_0 = (RuleCall)cInnerObjectsAssignment_7_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cImplementingKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cNvObjectAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cNvObjectObjectCrossReference_8_1_0 = (CrossReference)cNvObjectAssignment_8_1.eContents().get(0);
		private final RuleCall cNvObjectObjectQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cNvObjectObjectCrossReference_8_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Object:
		//
		//	ObjectType=("EV_Object" | "IV_Object" | "CV_Object" | "NV_Object" | "TV_Object") name=QualifiedName ("extends"
		//
		//	superObject=[Object|QualifiedName])? "{" properties+=Property* ("{" stateMachine=StateMachine "}")?
		//
		//	interfaces+=Interface* ("<" innerObjects+=Object+ ">")? ("implementing" nvObject=[Object|QualifiedName])? "}";
		public ParserRule getRule() { return rule; }

		//ObjectType=("EV_Object" | "IV_Object" | "CV_Object" | "NV_Object" | "TV_Object") name=QualifiedName ("extends"
		//
		//superObject=[Object|QualifiedName])? "{" properties+=Property* ("{" stateMachine=StateMachine "}")?
		//
		//interfaces+=Interface* ("<" innerObjects+=Object+ ">")? ("implementing" nvObject=[Object|QualifiedName])? "}"
		public Group getGroup() { return cGroup; }

		//ObjectType=("EV_Object" | "IV_Object" | "CV_Object" | "NV_Object" | "TV_Object")
		public Assignment getObjectTypeAssignment_0() { return cObjectTypeAssignment_0; }

		//"EV_Object" | "IV_Object" | "CV_Object" | "NV_Object" | "TV_Object"
		public Alternatives getObjectTypeAlternatives_0_0() { return cObjectTypeAlternatives_0_0; }

		//"EV_Object"
		public Keyword getObjectTypeEV_ObjectKeyword_0_0_0() { return cObjectTypeEV_ObjectKeyword_0_0_0; }

		//"IV_Object"
		public Keyword getObjectTypeIV_ObjectKeyword_0_0_1() { return cObjectTypeIV_ObjectKeyword_0_0_1; }

		//"CV_Object"
		public Keyword getObjectTypeCV_ObjectKeyword_0_0_2() { return cObjectTypeCV_ObjectKeyword_0_0_2; }

		//"NV_Object"
		public Keyword getObjectTypeNV_ObjectKeyword_0_0_3() { return cObjectTypeNV_ObjectKeyword_0_0_3; }

		//"TV_Object"
		public Keyword getObjectTypeTV_ObjectKeyword_0_0_4() { return cObjectTypeTV_ObjectKeyword_0_0_4; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("extends" superObject=[Object|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superObject=[Object|QualifiedName]
		public Assignment getSuperObjectAssignment_2_1() { return cSuperObjectAssignment_2_1; }

		//[Object|QualifiedName]
		public CrossReference getSuperObjectObjectCrossReference_2_1_0() { return cSuperObjectObjectCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperObjectObjectQualifiedNameParserRuleCall_2_1_0_1() { return cSuperObjectObjectQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }

		//("{" stateMachine=StateMachine "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//stateMachine=StateMachine
		public Assignment getStateMachineAssignment_5_1() { return cStateMachineAssignment_5_1; }

		//StateMachine
		public RuleCall getStateMachineStateMachineParserRuleCall_5_1_0() { return cStateMachineStateMachineParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }

		//interfaces+=Interface*
		public Assignment getInterfacesAssignment_6() { return cInterfacesAssignment_6; }

		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_6_0() { return cInterfacesInterfaceParserRuleCall_6_0; }

		//("<" innerObjects+=Object+ ">")?
		public Group getGroup_7() { return cGroup_7; }

		//"<"
		public Keyword getLessThanSignKeyword_7_0() { return cLessThanSignKeyword_7_0; }

		//innerObjects+=Object+
		public Assignment getInnerObjectsAssignment_7_1() { return cInnerObjectsAssignment_7_1; }

		//Object
		public RuleCall getInnerObjectsObjectParserRuleCall_7_1_0() { return cInnerObjectsObjectParserRuleCall_7_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_7_2() { return cGreaterThanSignKeyword_7_2; }

		//("implementing" nvObject=[Object|QualifiedName])?
		public Group getGroup_8() { return cGroup_8; }

		//"implementing"
		public Keyword getImplementingKeyword_8_0() { return cImplementingKeyword_8_0; }

		//nvObject=[Object|QualifiedName]
		public Assignment getNvObjectAssignment_8_1() { return cNvObjectAssignment_8_1; }

		//[Object|QualifiedName]
		public CrossReference getNvObjectObjectCrossReference_8_1_0() { return cNvObjectObjectCrossReference_8_1_0; }

		//QualifiedName
		public RuleCall getNvObjectObjectQualifiedNameParserRuleCall_8_1_0_1() { return cNvObjectObjectQualifiedNameParserRuleCall_8_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeModelElementCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeModelElementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeModelElementCrossReference_3_0.eContents().get(1);
		private final Assignment cManyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_4_0 = (Keyword)cManyAssignment_4.eContents().get(0);
		
		//Property:
		//
		//	"property" name=QualifiedName ":" type=[ModelElement|QualifiedName] many?="[]"?;
		public ParserRule getRule() { return rule; }

		//"property" name=QualifiedName ":" type=[ModelElement|QualifiedName] many?="[]"?
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[ModelElement|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ModelElement|QualifiedName]
		public CrossReference getTypeModelElementCrossReference_3_0() { return cTypeModelElementCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeModelElementQualifiedNameParserRuleCall_3_0_1() { return cTypeModelElementQualifiedNameParserRuleCall_3_0_1; }

		//many?="[]"?
		public Assignment getManyAssignment_4() { return cManyAssignment_4; }

		//"[]"
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_4_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_4_0; }
	}

	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCommandsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCommandsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommandsCommandParserRuleCall_4_0 = (RuleCall)cCommandsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStateParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		
		//StateMachine:
		//
		//	"events" events+=Event+ "end" "commands" commands+=Command+ "end" states+=State+;
		public ParserRule getRule() { return rule; }

		//"events" events+=Event+ "end" "commands" commands+=Command+ "end" states+=State+
		public Group getGroup() { return cGroup; }

		//"events"
		public Keyword getEventsKeyword_0() { return cEventsKeyword_0; }

		//events+=Event+
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }

		//Event
		public RuleCall getEventsEventParserRuleCall_1_0() { return cEventsEventParserRuleCall_1_0; }

		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }

		//"commands"
		public Keyword getCommandsKeyword_3() { return cCommandsKeyword_3; }

		//commands+=Command+
		public Assignment getCommandsAssignment_4() { return cCommandsAssignment_4; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_4_0() { return cCommandsCommandParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//states+=State+
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }

		//State
		public RuleCall getStatesStateParserRuleCall_6_0() { return cStatesStateParserRuleCall_6_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Event:
		//
		//	name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Command:
		//
		//	name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cActionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cActionsCommandCrossReference_2_2_0 = (CrossReference)cActionsAssignment_2_2.eContents().get(0);
		private final RuleCall cActionsCommandIDTerminalRuleCall_2_2_0_1 = (RuleCall)cActionsCommandCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStateTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateTransitionsStateTransitionParserRuleCall_3_0 = (RuleCall)cStateTransitionsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//State:
		//
		//	"state" name=QualifiedName ("actions" "{" actions+=[Command]+ "}")? stateTransitions+=StateTransition* "end";
		public ParserRule getRule() { return rule; }

		//"state" name=QualifiedName ("actions" "{" actions+=[Command]+ "}")? stateTransitions+=StateTransition* "end"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("actions" "{" actions+=[Command]+ "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"actions"
		public Keyword getActionsKeyword_2_0() { return cActionsKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//actions+=[Command]+
		public Assignment getActionsAssignment_2_2() { return cActionsAssignment_2_2; }

		//[Command]
		public CrossReference getActionsCommandCrossReference_2_2_0() { return cActionsCommandCrossReference_2_2_0; }

		//ID
		public RuleCall getActionsCommandIDTerminalRuleCall_2_2_0_1() { return cActionsCommandIDTerminalRuleCall_2_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//stateTransitions+=StateTransition*
		public Assignment getStateTransitionsAssignment_3() { return cStateTransitionsAssignment_3; }

		//StateTransition
		public RuleCall getStateTransitionsStateTransitionParserRuleCall_3_0() { return cStateTransitionsStateTransitionParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class StateTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		
		//StateTransition:
		//
		//	event=[Event] "=>" state=[State];
		public ParserRule getRule() { return rule; }

		//event=[Event] "=>" state=[State]
		public Group getGroup() { return cGroup; }

		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }

		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfaceTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cInterfaceTypeAlternatives_0_0 = (Alternatives)cInterfaceTypeAssignment_0.eContents().get(0);
		private final Keyword cInterfaceTypeCV_StreamInterfaceKeyword_0_0_0 = (Keyword)cInterfaceTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cInterfaceTypeCV_OperationInterfaceKeyword_0_0_1 = (Keyword)cInterfaceTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cInterfaceTypeCV_SignalInterfaceKeyword_0_0_2 = (Keyword)cInterfaceTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cInterfaceTypeNV_StreamInterfaceKeyword_0_0_3 = (Keyword)cInterfaceTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cInterfaceTypeNV_OperationInterfaceKeyword_0_0_4 = (Keyword)cInterfaceTypeAlternatives_0_0.eContents().get(4);
		private final Keyword cInterfaceTypeNV_SignalInterfaceKeyword_0_0_5 = (Keyword)cInterfaceTypeAlternatives_0_0.eContents().get(5);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSignatureReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSignatureReferencesSignatureReferenceParserRuleCall_2_1_0 = (RuleCall)cSignatureReferencesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Interface:
		//
		//	interfaceType=("CV_StreamInterface" | "CV_OperationInterface" | "CV_SignalInterface" | "NV_StreamInterface" |
		//
		//	"NV_OperationInterface" | "NV_SignalInterface") name=QualifiedName ("{" signatureReferences+=SignatureReference*
		//
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//interfaceType=("CV_StreamInterface" | "CV_OperationInterface" | "CV_SignalInterface" | "NV_StreamInterface" |
		//
		//"NV_OperationInterface" | "NV_SignalInterface") name=QualifiedName ("{" signatureReferences+=SignatureReference* "}")?
		public Group getGroup() { return cGroup; }

		//interfaceType=("CV_StreamInterface" | "CV_OperationInterface" | "CV_SignalInterface" | "NV_StreamInterface" |
		//
		//"NV_OperationInterface" | "NV_SignalInterface")
		public Assignment getInterfaceTypeAssignment_0() { return cInterfaceTypeAssignment_0; }

		//"CV_StreamInterface" | "CV_OperationInterface" | "CV_SignalInterface" | "NV_StreamInterface" | "NV_OperationInterface" |
		//
		//"NV_SignalInterface"
		public Alternatives getInterfaceTypeAlternatives_0_0() { return cInterfaceTypeAlternatives_0_0; }

		//"CV_StreamInterface"
		public Keyword getInterfaceTypeCV_StreamInterfaceKeyword_0_0_0() { return cInterfaceTypeCV_StreamInterfaceKeyword_0_0_0; }

		//"CV_OperationInterface"
		public Keyword getInterfaceTypeCV_OperationInterfaceKeyword_0_0_1() { return cInterfaceTypeCV_OperationInterfaceKeyword_0_0_1; }

		//"CV_SignalInterface"
		public Keyword getInterfaceTypeCV_SignalInterfaceKeyword_0_0_2() { return cInterfaceTypeCV_SignalInterfaceKeyword_0_0_2; }

		//"NV_StreamInterface"
		public Keyword getInterfaceTypeNV_StreamInterfaceKeyword_0_0_3() { return cInterfaceTypeNV_StreamInterfaceKeyword_0_0_3; }

		//"NV_OperationInterface"
		public Keyword getInterfaceTypeNV_OperationInterfaceKeyword_0_0_4() { return cInterfaceTypeNV_OperationInterfaceKeyword_0_0_4; }

		//"NV_SignalInterface"
		public Keyword getInterfaceTypeNV_SignalInterfaceKeyword_0_0_5() { return cInterfaceTypeNV_SignalInterfaceKeyword_0_0_5; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("{" signatureReferences+=SignatureReference* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//signatureReferences+=SignatureReference*
		public Assignment getSignatureReferencesAssignment_2_1() { return cSignatureReferencesAssignment_2_1; }

		//SignatureReference
		public RuleCall getSignatureReferencesSignatureReferenceParserRuleCall_2_1_0() { return cSignatureReferencesSignatureReferenceParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class SignatureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignatureReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRoleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cRoleAlternatives_0_0 = (Alternatives)cRoleAssignment_0.eContents().get(0);
		private final Keyword cRoleProvidingKeyword_0_0_0 = (Keyword)cRoleAlternatives_0_0.eContents().get(0);
		private final Keyword cRoleUsingKeyword_0_0_1 = (Keyword)cRoleAlternatives_0_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefSignatureDefCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefSignatureDefIDTerminalRuleCall_1_0_1 = (RuleCall)cRefSignatureDefCrossReference_1_0.eContents().get(1);
		
		//SignatureReference:
		//
		//	role=("providing" | "using") ref=[SignatureDef];
		public ParserRule getRule() { return rule; }

		//role=("providing" | "using") ref=[SignatureDef]
		public Group getGroup() { return cGroup; }

		//role=("providing" | "using")
		public Assignment getRoleAssignment_0() { return cRoleAssignment_0; }

		//"providing" | "using"
		public Alternatives getRoleAlternatives_0_0() { return cRoleAlternatives_0_0; }

		//"providing"
		public Keyword getRoleProvidingKeyword_0_0_0() { return cRoleProvidingKeyword_0_0_0; }

		//"using"
		public Keyword getRoleUsingKeyword_0_0_1() { return cRoleUsingKeyword_0_0_1; }

		//ref=[SignatureDef]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[SignatureDef]
		public CrossReference getRefSignatureDefCrossReference_1_0() { return cRefSignatureDefCrossReference_1_0; }

		//ID
		public RuleCall getRefSignatureDefIDTerminalRuleCall_1_0_1() { return cRefSignatureDefIDTerminalRuleCall_1_0_1; }
	}

	public class SignatureDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignatureDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSignatureTypeAlternatives_0_0 = (Alternatives)cSignatureTypeAssignment_0.eContents().get(0);
		private final Keyword cSignatureTypeCV_SignalInterfaceSignatureKeyword_0_0_0 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cSignatureTypeCV_StreamInterfaceSignatureKeyword_0_0_1 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cSignatureTypeCV_OperationInterfaceSignatureKeyword_0_0_2 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cSignatureTypeCV_FlowSignatureKeyword_0_0_3 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cSignatureTypeNV_SignalInterfaceSignatureKeyword_0_0_4 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(4);
		private final Keyword cSignatureTypeNV_StreamInterfaceSignatureKeyword_0_0_5 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(5);
		private final Keyword cSignatureTypeNV_OperationInterfaceSignatureKeyword_0_0_6 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(6);
		private final Keyword cSignatureTypeNV_FlowSignatureKeyword_0_0_7 = (Keyword)cSignatureTypeAlternatives_0_0.eContents().get(7);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParamParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SignatureDef:
		//
		//	signatureType=("CV_SignalInterfaceSignature" | "CV_StreamInterfaceSignature" | "CV_OperationInterfaceSignature" |
		//
		//	"CV_FlowSignature" | "NV_SignalInterfaceSignature" | "NV_StreamInterfaceSignature" | "NV_OperationInterfaceSignature"
		//
		//	| "NV_FlowSignature") name=QualifiedName "{" params+=Param* "}";
		public ParserRule getRule() { return rule; }

		//signatureType=("CV_SignalInterfaceSignature" | "CV_StreamInterfaceSignature" | "CV_OperationInterfaceSignature" |
		//
		//"CV_FlowSignature" | "NV_SignalInterfaceSignature" | "NV_StreamInterfaceSignature" | "NV_OperationInterfaceSignature"
		//
		//| "NV_FlowSignature") name=QualifiedName "{" params+=Param* "}"
		public Group getGroup() { return cGroup; }

		//signatureType=("CV_SignalInterfaceSignature" | "CV_StreamInterfaceSignature" | "CV_OperationInterfaceSignature" |
		//
		//"CV_FlowSignature" | "NV_SignalInterfaceSignature" | "NV_StreamInterfaceSignature" | "NV_OperationInterfaceSignature"
		//
		//| "NV_FlowSignature")
		public Assignment getSignatureTypeAssignment_0() { return cSignatureTypeAssignment_0; }

		//"CV_SignalInterfaceSignature" | "CV_StreamInterfaceSignature" | "CV_OperationInterfaceSignature" | "CV_FlowSignature" |
		//
		//"NV_SignalInterfaceSignature" | "NV_StreamInterfaceSignature" | "NV_OperationInterfaceSignature" | "NV_FlowSignature"
		public Alternatives getSignatureTypeAlternatives_0_0() { return cSignatureTypeAlternatives_0_0; }

		//"CV_SignalInterfaceSignature"
		public Keyword getSignatureTypeCV_SignalInterfaceSignatureKeyword_0_0_0() { return cSignatureTypeCV_SignalInterfaceSignatureKeyword_0_0_0; }

		//"CV_StreamInterfaceSignature"
		public Keyword getSignatureTypeCV_StreamInterfaceSignatureKeyword_0_0_1() { return cSignatureTypeCV_StreamInterfaceSignatureKeyword_0_0_1; }

		//"CV_OperationInterfaceSignature"
		public Keyword getSignatureTypeCV_OperationInterfaceSignatureKeyword_0_0_2() { return cSignatureTypeCV_OperationInterfaceSignatureKeyword_0_0_2; }

		//"CV_FlowSignature"
		public Keyword getSignatureTypeCV_FlowSignatureKeyword_0_0_3() { return cSignatureTypeCV_FlowSignatureKeyword_0_0_3; }

		//"NV_SignalInterfaceSignature"
		public Keyword getSignatureTypeNV_SignalInterfaceSignatureKeyword_0_0_4() { return cSignatureTypeNV_SignalInterfaceSignatureKeyword_0_0_4; }

		//"NV_StreamInterfaceSignature"
		public Keyword getSignatureTypeNV_StreamInterfaceSignatureKeyword_0_0_5() { return cSignatureTypeNV_StreamInterfaceSignatureKeyword_0_0_5; }

		//"NV_OperationInterfaceSignature"
		public Keyword getSignatureTypeNV_OperationInterfaceSignatureKeyword_0_0_6() { return cSignatureTypeNV_OperationInterfaceSignatureKeyword_0_0_6; }

		//"NV_FlowSignature"
		public Keyword getSignatureTypeNV_FlowSignatureKeyword_0_0_7() { return cSignatureTypeNV_FlowSignatureKeyword_0_0_7; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//params+=Param*
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }

		//Param
		public RuleCall getParamsParamParserRuleCall_3_0() { return cParamsParamParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cDirectionAlternatives_1_0 = (Alternatives)cDirectionAssignment_1.eContents().get(0);
		private final Keyword cDirectionInKeyword_1_0_0 = (Keyword)cDirectionAlternatives_1_0.eContents().get(0);
		private final Keyword cDirectionOutKeyword_1_0_1 = (Keyword)cDirectionAlternatives_1_0.eContents().get(1);
		private final Keyword cDirectionInoutKeyword_1_0_2 = (Keyword)cDirectionAlternatives_1_0.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeTypeCrossReference_4_0.eContents().get(1);
		
		//Param:
		//
		//	"parameter" direction=("in" | "out" | "inout") name=QualifiedName ":" type=[Type];
		public ParserRule getRule() { return rule; }

		//"parameter" direction=("in" | "out" | "inout") name=QualifiedName ":" type=[Type]
		public Group getGroup() { return cGroup; }

		//"parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//direction=("in" | "out" | "inout")
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//"in" | "out" | "inout"
		public Alternatives getDirectionAlternatives_1_0() { return cDirectionAlternatives_1_0; }

		//"in"
		public Keyword getDirectionInKeyword_1_0_0() { return cDirectionInKeyword_1_0_0; }

		//"out"
		public Keyword getDirectionOutKeyword_1_0_1() { return cDirectionOutKeyword_1_0_1; }

		//"inout"
		public Keyword getDirectionInoutKeyword_1_0_2() { return cDirectionInoutKeyword_1_0_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=[Type]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_4_0() { return cTypeTypeCrossReference_4_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_4_0_1() { return cTypeTypeIDTerminalRuleCall_4_0_1; }
	}

	public class EV_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EV_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnterpriseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFoaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFoaFieldOfApplicationParserRuleCall_3_0 = (RuleCall)cFoaAssignment_3.eContents().get(0);
		private final Assignment cGlobalObjectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGlobalObjectsObjectParserRuleCall_4_0 = (RuleCall)cGlobalObjectsAssignment_4.eContents().get(0);
		private final Assignment cCommunityContractsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommunityContractsCommunityContractParserRuleCall_5_0 = (RuleCall)cCommunityContractsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		//EV_spec:
		//
		//	"enterprise" name=QualifiedName "{" foa=FieldOfApplication globalObjects+=Object*
		//
		//	communityContracts+=CommunityContract+ "}";
		public ParserRule getRule() { return rule; }

		//"enterprise" name=QualifiedName "{" foa=FieldOfApplication globalObjects+=Object* communityContracts+=CommunityContract+
		//
		//"}"
		public Group getGroup() { return cGroup; }

		//"enterprise"
		public Keyword getEnterpriseKeyword_0() { return cEnterpriseKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//foa=FieldOfApplication
		public Assignment getFoaAssignment_3() { return cFoaAssignment_3; }

		//FieldOfApplication
		public RuleCall getFoaFieldOfApplicationParserRuleCall_3_0() { return cFoaFieldOfApplicationParserRuleCall_3_0; }

		//globalObjects+=Object*
		public Assignment getGlobalObjectsAssignment_4() { return cGlobalObjectsAssignment_4; }

		//Object
		public RuleCall getGlobalObjectsObjectParserRuleCall_4_0() { return cGlobalObjectsObjectParserRuleCall_4_0; }

		//communityContracts+=CommunityContract+
		public Assignment getCommunityContractsAssignment_5() { return cCommunityContractsAssignment_5; }

		//CommunityContract
		public RuleCall getCommunityContractsCommunityContractParserRuleCall_5_0() { return cCommunityContractsCommunityContractParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CommunityContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommunityContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_CommunityContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectiveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectiveObjectiveParserRuleCall_3_0 = (RuleCall)cObjectiveAssignment_3.eContents().get(0);
		private final Assignment cCommunityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommunityCommunityParserRuleCall_4_0 = (RuleCall)cCommunityAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CommunityContract:
		//
		//	"EV_CommunityContract" name=QualifiedName "{" objective=Objective community=Community "}";
		public ParserRule getRule() { return rule; }

		//"EV_CommunityContract" name=QualifiedName "{" objective=Objective community=Community "}"
		public Group getGroup() { return cGroup; }

		//"EV_CommunityContract"
		public Keyword getEV_CommunityContractKeyword_0() { return cEV_CommunityContractKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//objective=Objective
		public Assignment getObjectiveAssignment_3() { return cObjectiveAssignment_3; }

		//Objective
		public RuleCall getObjectiveObjectiveParserRuleCall_3_0() { return cObjectiveObjectiveParserRuleCall_3_0; }

		//community=Community
		public Assignment getCommunityAssignment_4() { return cCommunityAssignment_4; }

		//Community
		public RuleCall getCommunityCommunityParserRuleCall_4_0() { return cCommunityCommunityParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CommunityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Community");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_CommunityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocalObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocalObjectsObjectParserRuleCall_3_0 = (RuleCall)cLocalObjectsAssignment_3.eContents().get(0);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesRoleParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final Assignment cOr_relationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOr_relationsOR_RelationParserRuleCall_5_0 = (RuleCall)cOr_relationsAssignment_5.eContents().get(0);
		private final Assignment cProcessesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProcessesProcessParserRuleCall_6_0 = (RuleCall)cProcessesAssignment_6.eContents().get(0);
		private final Assignment cInteractionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInteractionsInteractionParserRuleCall_7_0 = (RuleCall)cInteractionsAssignment_7.eContents().get(0);
		private final Assignment cPoliciesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPoliciesPolicyParserRuleCall_8_0 = (RuleCall)cPoliciesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Community:
		//
		//	"EV_Community" name=QualifiedName "{" localObjects+=Object* roles+=Role* or_relations+=OR_Relation*
		//
		//	processes+=Process* interactions+=Interaction* policies+=Policy* "}";
		public ParserRule getRule() { return rule; }

		//"EV_Community" name=QualifiedName "{" localObjects+=Object* roles+=Role* or_relations+=OR_Relation* processes+=Process*
		//
		//interactions+=Interaction* policies+=Policy* "}"
		public Group getGroup() { return cGroup; }

		//"EV_Community"
		public Keyword getEV_CommunityKeyword_0() { return cEV_CommunityKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//localObjects+=Object*
		public Assignment getLocalObjectsAssignment_3() { return cLocalObjectsAssignment_3; }

		//Object
		public RuleCall getLocalObjectsObjectParserRuleCall_3_0() { return cLocalObjectsObjectParserRuleCall_3_0; }

		//roles+=Role*
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }

		//Role
		public RuleCall getRolesRoleParserRuleCall_4_0() { return cRolesRoleParserRuleCall_4_0; }

		//or_relations+=OR_Relation*
		public Assignment getOr_relationsAssignment_5() { return cOr_relationsAssignment_5; }

		//OR_Relation
		public RuleCall getOr_relationsOR_RelationParserRuleCall_5_0() { return cOr_relationsOR_RelationParserRuleCall_5_0; }

		//processes+=Process*
		public Assignment getProcessesAssignment_6() { return cProcessesAssignment_6; }

		//Process
		public RuleCall getProcessesProcessParserRuleCall_6_0() { return cProcessesProcessParserRuleCall_6_0; }

		//interactions+=Interaction*
		public Assignment getInteractionsAssignment_7() { return cInteractionsAssignment_7; }

		//Interaction
		public RuleCall getInteractionsInteractionParserRuleCall_7_0() { return cInteractionsInteractionParserRuleCall_7_0; }

		//policies+=Policy*
		public Assignment getPoliciesAssignment_8() { return cPoliciesAssignment_8; }

		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_8_0() { return cPoliciesPolicyParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class FieldOfApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldOfApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_FieldOfApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFoaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFoaSTRINGTerminalRuleCall_1_0 = (RuleCall)cFoaAssignment_1.eContents().get(0);
		
		//FieldOfApplication:
		//
		//	"EV_FieldOfApplication" foa=STRING;
		public ParserRule getRule() { return rule; }

		//"EV_FieldOfApplication" foa=STRING
		public Group getGroup() { return cGroup; }

		//"EV_FieldOfApplication"
		public Keyword getEV_FieldOfApplicationKeyword_0() { return cEV_FieldOfApplicationKeyword_0; }

		//foa=STRING
		public Assignment getFoaAssignment_1() { return cFoaAssignment_1; }

		//STRING
		public RuleCall getFoaSTRINGTerminalRuleCall_1_0() { return cFoaSTRINGTerminalRuleCall_1_0; }
	}

	public class ObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Objective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_ObjectiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cObjectiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectiveSTRINGTerminalRuleCall_2_0 = (RuleCall)cObjectiveAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSubobjAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubobjObjectiveParserRuleCall_3_1_0 = (RuleCall)cSubobjAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Objective:
		//
		//	"EV_Objective" name=QualifiedName objective=STRING ("{" subobj+=Objective+ "}")?;
		public ParserRule getRule() { return rule; }

		//"EV_Objective" name=QualifiedName objective=STRING ("{" subobj+=Objective+ "}")?
		public Group getGroup() { return cGroup; }

		//"EV_Objective"
		public Keyword getEV_ObjectiveKeyword_0() { return cEV_ObjectiveKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//objective=STRING
		public Assignment getObjectiveAssignment_2() { return cObjectiveAssignment_2; }

		//STRING
		public RuleCall getObjectiveSTRINGTerminalRuleCall_2_0() { return cObjectiveSTRINGTerminalRuleCall_2_0; }

		//("{" subobj+=Objective+ "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//subobj+=Objective+
		public Assignment getSubobjAssignment_3_1() { return cSubobjAssignment_3_1; }

		//Objective
		public RuleCall getSubobjObjectiveParserRuleCall_3_1_0() { return cSubobjObjectiveParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_RoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDelegatesToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTargetRoleCrossReference_2_1_0 = (CrossReference)cTargetAssignment_2_1.eContents().get(0);
		private final RuleCall cTargetRoleQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cTargetRoleCrossReference_2_1_0.eContents().get(1);
		
		//// More elements other than 'delegates to' need to be introduced. //
		//
		//Role:
		//
		//	"EV_Role" name=QualifiedName ("delegates to" target=[Role|QualifiedName])?;
		public ParserRule getRule() { return rule; }

		//"EV_Role" name=QualifiedName ("delegates to" target=[Role|QualifiedName])?
		public Group getGroup() { return cGroup; }

		//"EV_Role"
		public Keyword getEV_RoleKeyword_0() { return cEV_RoleKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("delegates to" target=[Role|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"delegates to"
		public Keyword getDelegatesToKeyword_2_0() { return cDelegatesToKeyword_2_0; }

		//target=[Role|QualifiedName]
		public Assignment getTargetAssignment_2_1() { return cTargetAssignment_2_1; }

		//[Role|QualifiedName]
		public CrossReference getTargetRoleCrossReference_2_1_0() { return cTargetRoleCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getTargetRoleQualifiedNameParserRuleCall_2_1_0_1() { return cTargetRoleQualifiedNameParserRuleCall_2_1_0_1; }
	}

	public class OR_RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OR_Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_ObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjectObjectCrossReference_1_0 = (CrossReference)cObjectAssignment_1.eContents().get(0);
		private final RuleCall cObjectObjectQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cObjectObjectCrossReference_1_0.eContents().get(1);
		private final Keyword cFufillsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRoleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRoleRoleCrossReference_3_0 = (CrossReference)cRoleAssignment_3.eContents().get(0);
		private final RuleCall cRoleRoleQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cRoleRoleCrossReference_3_0.eContents().get(1);
		private final Keyword cEV_RoleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OR_Relation:
		//
		//	"EV_Object" object=[Object|QualifiedName] "fufills" role=[Role|QualifiedName] "EV_Role";
		public ParserRule getRule() { return rule; }

		//"EV_Object" object=[Object|QualifiedName] "fufills" role=[Role|QualifiedName] "EV_Role"
		public Group getGroup() { return cGroup; }

		//"EV_Object"
		public Keyword getEV_ObjectKeyword_0() { return cEV_ObjectKeyword_0; }

		//object=[Object|QualifiedName]
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }

		//[Object|QualifiedName]
		public CrossReference getObjectObjectCrossReference_1_0() { return cObjectObjectCrossReference_1_0; }

		//QualifiedName
		public RuleCall getObjectObjectQualifiedNameParserRuleCall_1_0_1() { return cObjectObjectQualifiedNameParserRuleCall_1_0_1; }

		//"fufills"
		public Keyword getFufillsKeyword_2() { return cFufillsKeyword_2; }

		//role=[Role|QualifiedName]
		public Assignment getRoleAssignment_3() { return cRoleAssignment_3; }

		//[Role|QualifiedName]
		public CrossReference getRoleRoleCrossReference_3_0() { return cRoleRoleCrossReference_3_0; }

		//QualifiedName
		public RuleCall getRoleRoleQualifiedNameParserRuleCall_3_0_1() { return cRoleRoleQualifiedNameParserRuleCall_3_0_1; }

		//"EV_Role"
		public Keyword getEV_RoleKeyword_4() { return cEV_RoleKeyword_4; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_ProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cObjectiveKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cProcessObjectiveAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cProcessObjectiveObjectiveCrossReference_2_1_1_0 = (CrossReference)cProcessObjectiveAssignment_2_1_1.eContents().get(0);
		private final RuleCall cProcessObjectiveObjectiveQualifiedNameParserRuleCall_2_1_1_0_1 = (RuleCall)cProcessObjectiveObjectiveCrossReference_2_1_1_0.eContents().get(1);
		private final Assignment cLanesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLanesLaneParserRuleCall_2_2_0 = (RuleCall)cLanesAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Process:
		//
		//	"EV_Process" name=QualifiedName ("{" ("Objective" processObjective=[Objective|QualifiedName])? lanes+=Lane* "}")?;
		public ParserRule getRule() { return rule; }

		//"EV_Process" name=QualifiedName ("{" ("Objective" processObjective=[Objective|QualifiedName])? lanes+=Lane* "}")?
		public Group getGroup() { return cGroup; }

		//"EV_Process"
		public Keyword getEV_ProcessKeyword_0() { return cEV_ProcessKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("{" ("Objective" processObjective=[Objective|QualifiedName])? lanes+=Lane* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("Objective" processObjective=[Objective|QualifiedName])?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"Objective"
		public Keyword getObjectiveKeyword_2_1_0() { return cObjectiveKeyword_2_1_0; }

		//processObjective=[Objective|QualifiedName]
		public Assignment getProcessObjectiveAssignment_2_1_1() { return cProcessObjectiveAssignment_2_1_1; }

		//[Objective|QualifiedName]
		public CrossReference getProcessObjectiveObjectiveCrossReference_2_1_1_0() { return cProcessObjectiveObjectiveCrossReference_2_1_1_0; }

		//QualifiedName
		public RuleCall getProcessObjectiveObjectiveQualifiedNameParserRuleCall_2_1_1_0_1() { return cProcessObjectiveObjectiveQualifiedNameParserRuleCall_2_1_1_0_1; }

		//lanes+=Lane*
		public Assignment getLanesAssignment_2_2() { return cLanesAssignment_2_2; }

		//Lane
		public RuleCall getLanesLaneParserRuleCall_2_2_0() { return cLanesLaneParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class LaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_RoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_1_0 = (CrossReference)cRoleAssignment_1.eContents().get(0);
		private final RuleCall cRoleRoleQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRoleRoleCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNodesNodeParserRuleCall_3_0 = (RuleCall)cNodesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Lane:
		//
		//	"EV_Role" role=[Role|QualifiedName] "{" nodes+=Node* "}";
		public ParserRule getRule() { return rule; }

		//"EV_Role" role=[Role|QualifiedName] "{" nodes+=Node* "}"
		public Group getGroup() { return cGroup; }

		//"EV_Role"
		public Keyword getEV_RoleKeyword_0() { return cEV_RoleKeyword_0; }

		//role=[Role|QualifiedName]
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//[Role|QualifiedName]
		public CrossReference getRoleRoleCrossReference_1_0() { return cRoleRoleCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRoleRoleQualifiedNameParserRuleCall_1_0_1() { return cRoleRoleQualifiedNameParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//nodes+=Node*
		public Assignment getNodesAssignment_3() { return cNodesAssignment_3; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_3_0() { return cNodesNodeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecisionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubprocessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStartParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEndParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cArtefactParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Node:
		//
		//	Decision | Action | Subprocess | Start | End | Artefact;
		public ParserRule getRule() { return rule; }

		//Decision | Action | Subprocess | Start | End | Artefact
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decision
		public RuleCall getDecisionParserRuleCall_0() { return cDecisionParserRuleCall_0; }

		//Action
		public RuleCall getActionParserRuleCall_1() { return cActionParserRuleCall_1; }

		//Subprocess
		public RuleCall getSubprocessParserRuleCall_2() { return cSubprocessParserRuleCall_2; }

		//Start
		public RuleCall getStartParserRuleCall_3() { return cStartParserRuleCall_3; }

		//End
		public RuleCall getEndParserRuleCall_4() { return cEndParserRuleCall_4; }

		//Artefact
		public RuleCall getArtefactParserRuleCall_5() { return cArtefactParserRuleCall_5; }
	}

	public class DecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIncomingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIncomingsIncomingParserRuleCall_3_0 = (RuleCall)cIncomingsAssignment_3.eContents().get(0);
		private final Assignment cOutgoingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutgoingsOutgoingParserRuleCall_4_0 = (RuleCall)cOutgoingsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Decision:
		//
		//	"decision" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}";
		public ParserRule getRule() { return rule; }

		//"decision" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}"
		public Group getGroup() { return cGroup; }

		//"decision"
		public Keyword getDecisionKeyword_0() { return cDecisionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//incomings+=Incoming*
		public Assignment getIncomingsAssignment_3() { return cIncomingsAssignment_3; }

		//Incoming
		public RuleCall getIncomingsIncomingParserRuleCall_3_0() { return cIncomingsIncomingParserRuleCall_3_0; }

		//outgoings+=Outgoing*
		public Assignment getOutgoingsAssignment_4() { return cOutgoingsAssignment_4; }

		//Outgoing
		public RuleCall getOutgoingsOutgoingParserRuleCall_4_0() { return cOutgoingsOutgoingParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class IncomingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Incoming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncomingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIncomingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIncomingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIncomingNodeCrossReference_2_0 = (CrossReference)cIncomingAssignment_2.eContents().get(0);
		private final RuleCall cIncomingNodeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cIncomingNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cInConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInConditionSTRINGTerminalRuleCall_3_0 = (RuleCall)cInConditionAssignment_3.eContents().get(0);
		
		//Incoming:
		//
		//	{Incoming} "incoming" incoming+=[Node|QualifiedName]* inCondition=STRING?;
		public ParserRule getRule() { return rule; }

		//{Incoming} "incoming" incoming+=[Node|QualifiedName]* inCondition=STRING?
		public Group getGroup() { return cGroup; }

		//{Incoming}
		public Action getIncomingAction_0() { return cIncomingAction_0; }

		//"incoming"
		public Keyword getIncomingKeyword_1() { return cIncomingKeyword_1; }

		//incoming+=[Node|QualifiedName]*
		public Assignment getIncomingAssignment_2() { return cIncomingAssignment_2; }

		//[Node|QualifiedName]
		public CrossReference getIncomingNodeCrossReference_2_0() { return cIncomingNodeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getIncomingNodeQualifiedNameParserRuleCall_2_0_1() { return cIncomingNodeQualifiedNameParserRuleCall_2_0_1; }

		//inCondition=STRING?
		public Assignment getInConditionAssignment_3() { return cInConditionAssignment_3; }

		//STRING
		public RuleCall getInConditionSTRINGTerminalRuleCall_3_0() { return cInConditionSTRINGTerminalRuleCall_3_0; }
	}

	public class OutgoingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Outgoing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutgoingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutgoingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutgoingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOutgoingNodeCrossReference_2_0 = (CrossReference)cOutgoingAssignment_2.eContents().get(0);
		private final RuleCall cOutgoingNodeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cOutgoingNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cOutConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutConditionSTRINGTerminalRuleCall_3_0 = (RuleCall)cOutConditionAssignment_3.eContents().get(0);
		
		//Outgoing:
		//
		//	{Outgoing} "outgoing" outgoing+=[Node|QualifiedName]* outCondition=STRING?;
		public ParserRule getRule() { return rule; }

		//{Outgoing} "outgoing" outgoing+=[Node|QualifiedName]* outCondition=STRING?
		public Group getGroup() { return cGroup; }

		//{Outgoing}
		public Action getOutgoingAction_0() { return cOutgoingAction_0; }

		//"outgoing"
		public Keyword getOutgoingKeyword_1() { return cOutgoingKeyword_1; }

		//outgoing+=[Node|QualifiedName]*
		public Assignment getOutgoingAssignment_2() { return cOutgoingAssignment_2; }

		//[Node|QualifiedName]
		public CrossReference getOutgoingNodeCrossReference_2_0() { return cOutgoingNodeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getOutgoingNodeQualifiedNameParserRuleCall_2_0_1() { return cOutgoingNodeQualifiedNameParserRuleCall_2_0_1; }

		//outCondition=STRING?
		public Assignment getOutConditionAssignment_3() { return cOutConditionAssignment_3; }

		//STRING
		public RuleCall getOutConditionSTRINGTerminalRuleCall_3_0() { return cOutConditionSTRINGTerminalRuleCall_3_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_StepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIncomingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIncomingsIncomingParserRuleCall_3_0 = (RuleCall)cIncomingsAssignment_3.eContents().get(0);
		private final Assignment cOutgoingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutgoingsOutgoingParserRuleCall_4_0 = (RuleCall)cOutgoingsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Action:
		//
		//	"EV_Step" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}";
		public ParserRule getRule() { return rule; }

		//"EV_Step" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}"
		public Group getGroup() { return cGroup; }

		//"EV_Step"
		public Keyword getEV_StepKeyword_0() { return cEV_StepKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//incomings+=Incoming*
		public Assignment getIncomingsAssignment_3() { return cIncomingsAssignment_3; }

		//Incoming
		public RuleCall getIncomingsIncomingParserRuleCall_3_0() { return cIncomingsIncomingParserRuleCall_3_0; }

		//outgoings+=Outgoing*
		public Assignment getOutgoingsAssignment_4() { return cOutgoingsAssignment_4; }

		//Outgoing
		public RuleCall getOutgoingsOutgoingParserRuleCall_4_0() { return cOutgoingsOutgoingParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SubprocessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subprocess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubprocessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIncomingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIncomingsIncomingParserRuleCall_3_0 = (RuleCall)cIncomingsAssignment_3.eContents().get(0);
		private final Assignment cOutgoingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutgoingsOutgoingParserRuleCall_4_0 = (RuleCall)cOutgoingsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Subprocess:
		//
		//	"subprocess" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}";
		public ParserRule getRule() { return rule; }

		//"subprocess" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}"
		public Group getGroup() { return cGroup; }

		//"subprocess"
		public Keyword getSubprocessKeyword_0() { return cSubprocessKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//incomings+=Incoming*
		public Assignment getIncomingsAssignment_3() { return cIncomingsAssignment_3; }

		//Incoming
		public RuleCall getIncomingsIncomingParserRuleCall_3_0() { return cIncomingsIncomingParserRuleCall_3_0; }

		//outgoings+=Outgoing*
		public Assignment getOutgoingsAssignment_4() { return cOutgoingsAssignment_4; }

		//Outgoing
		public RuleCall getOutgoingsOutgoingParserRuleCall_4_0() { return cOutgoingsOutgoingParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOutgoingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutgoingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOutgoingNodeCrossReference_4_0 = (CrossReference)cOutgoingAssignment_4.eContents().get(0);
		private final RuleCall cOutgoingNodeQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cOutgoingNodeCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Start:
		//
		//	"start" name=QualifiedName "{" "outgoing" outgoing+=[Node|QualifiedName]* "}";
		public ParserRule getRule() { return rule; }

		//"start" name=QualifiedName "{" "outgoing" outgoing+=[Node|QualifiedName]* "}"
		public Group getGroup() { return cGroup; }

		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"outgoing"
		public Keyword getOutgoingKeyword_3() { return cOutgoingKeyword_3; }

		//outgoing+=[Node|QualifiedName]*
		public Assignment getOutgoingAssignment_4() { return cOutgoingAssignment_4; }

		//[Node|QualifiedName]
		public CrossReference getOutgoingNodeCrossReference_4_0() { return cOutgoingNodeCrossReference_4_0; }

		//QualifiedName
		public RuleCall getOutgoingNodeQualifiedNameParserRuleCall_4_0_1() { return cOutgoingNodeQualifiedNameParserRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIncomingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIncomingsIncomingParserRuleCall_3_0 = (RuleCall)cIncomingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//End:
		//
		//	"end" name=QualifiedName "{" incomings+=Incoming* "}";
		public ParserRule getRule() { return rule; }

		//"end" name=QualifiedName "{" incomings+=Incoming* "}"
		public Group getGroup() { return cGroup; }

		//"end"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//incomings+=Incoming*
		public Assignment getIncomingsAssignment_3() { return cIncomingsAssignment_3; }

		//Incoming
		public RuleCall getIncomingsIncomingParserRuleCall_3_0() { return cIncomingsIncomingParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ArtefactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artefact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_ArtefactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIncomingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cIncomingNodeCrossReference_3_1_0 = (CrossReference)cIncomingAssignment_3_1.eContents().get(0);
		private final RuleCall cIncomingNodeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cIncomingNodeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutgoingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutgoingAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOutgoingNodeCrossReference_4_1_0 = (CrossReference)cOutgoingAssignment_4_1.eContents().get(0);
		private final RuleCall cOutgoingNodeQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cOutgoingNodeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Artefact:
		//
		//	"EV_Artefact" name=QualifiedName "{" ("incoming" incoming=[Node|QualifiedName])? ("outgoing"
		//
		//	outgoing=[Node|QualifiedName])? "}";
		public ParserRule getRule() { return rule; }

		//"EV_Artefact" name=QualifiedName "{" ("incoming" incoming=[Node|QualifiedName])? ("outgoing"
		//
		//outgoing=[Node|QualifiedName])? "}"
		public Group getGroup() { return cGroup; }

		//"EV_Artefact"
		public Keyword getEV_ArtefactKeyword_0() { return cEV_ArtefactKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("incoming" incoming=[Node|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"incoming"
		public Keyword getIncomingKeyword_3_0() { return cIncomingKeyword_3_0; }

		//incoming=[Node|QualifiedName]
		public Assignment getIncomingAssignment_3_1() { return cIncomingAssignment_3_1; }

		//[Node|QualifiedName]
		public CrossReference getIncomingNodeCrossReference_3_1_0() { return cIncomingNodeCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getIncomingNodeQualifiedNameParserRuleCall_3_1_0_1() { return cIncomingNodeQualifiedNameParserRuleCall_3_1_0_1; }

		//("outgoing" outgoing=[Node|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"outgoing"
		public Keyword getOutgoingKeyword_4_0() { return cOutgoingKeyword_4_0; }

		//outgoing=[Node|QualifiedName]
		public Assignment getOutgoingAssignment_4_1() { return cOutgoingAssignment_4_1; }

		//[Node|QualifiedName]
		public CrossReference getOutgoingNodeCrossReference_4_1_0() { return cOutgoingNodeCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getOutgoingNodeQualifiedNameParserRuleCall_4_1_0_1() { return cOutgoingNodeQualifiedNameParserRuleCall_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_InteractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cProcessKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cProcess_defAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cProcess_defProcessCrossReference_2_1_1_0 = (CrossReference)cProcess_defAssignment_2_1_1.eContents().get(0);
		private final RuleCall cProcess_defProcessQualifiedNameParserRuleCall_2_1_1_0_1 = (RuleCall)cProcess_defProcessCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cEV_InteractionInitiatorKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInitiatorAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cInitiatorRoleCrossReference_2_3_0 = (CrossReference)cInitiatorAssignment_2_3.eContents().get(0);
		private final RuleCall cInitiatorRoleQualifiedNameParserRuleCall_2_3_0_1 = (RuleCall)cInitiatorRoleCrossReference_2_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cInitiator_statemachineAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cInitiator_statemachineStateMachineParserRuleCall_2_5_0 = (RuleCall)cInitiator_statemachineAssignment_2_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Keyword cEV_InteractionResponderKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Assignment cResponderAssignment_2_8 = (Assignment)cGroup_2.eContents().get(8);
		private final CrossReference cResponderRoleCrossReference_2_8_0 = (CrossReference)cResponderAssignment_2_8.eContents().get(0);
		private final RuleCall cResponderRoleQualifiedNameParserRuleCall_2_8_0_1 = (RuleCall)cResponderRoleCrossReference_2_8_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_9 = (Keyword)cGroup_2.eContents().get(9);
		private final Assignment cResponder_statemachineAssignment_2_10 = (Assignment)cGroup_2.eContents().get(10);
		private final RuleCall cResponder_statemachineStateMachineParserRuleCall_2_10_0 = (RuleCall)cResponder_statemachineAssignment_2_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_11 = (Keyword)cGroup_2.eContents().get(11);
		private final Assignment cInteractionArtefactsAssignment_2_12 = (Assignment)cGroup_2.eContents().get(12);
		private final RuleCall cInteractionArtefactsInteractionArtefactParserRuleCall_2_12_0 = (RuleCall)cInteractionArtefactsAssignment_2_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_13 = (Keyword)cGroup_2.eContents().get(13);
		
		//Interaction:
		//
		//	"EV_Interaction" name=QualifiedName ("{" ("Process" process_def=[Process|QualifiedName])? "EV_InteractionInitiator"
		//
		//	initiator=[Role|QualifiedName] "{" initiator_statemachine=StateMachine "}" "EV_InteractionResponder"
		//
		//	responder=[Role|QualifiedName] "{" responder_statemachine=StateMachine "}" interactionArtefacts+=InteractionArtefact*
		//
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"EV_Interaction" name=QualifiedName ("{" ("Process" process_def=[Process|QualifiedName])? "EV_InteractionInitiator"
		//
		//initiator=[Role|QualifiedName] "{" initiator_statemachine=StateMachine "}" "EV_InteractionResponder"
		//
		//responder=[Role|QualifiedName] "{" responder_statemachine=StateMachine "}" interactionArtefacts+=InteractionArtefact*
		//
		//"}")?
		public Group getGroup() { return cGroup; }

		//"EV_Interaction"
		public Keyword getEV_InteractionKeyword_0() { return cEV_InteractionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("{" ("Process" process_def=[Process|QualifiedName])? "EV_InteractionInitiator" initiator=[Role|QualifiedName] "{"
		//
		//initiator_statemachine=StateMachine "}" "EV_InteractionResponder" responder=[Role|QualifiedName] "{"
		//
		//responder_statemachine=StateMachine "}" interactionArtefacts+=InteractionArtefact* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("Process" process_def=[Process|QualifiedName])?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"Process"
		public Keyword getProcessKeyword_2_1_0() { return cProcessKeyword_2_1_0; }

		//process_def=[Process|QualifiedName]
		public Assignment getProcess_defAssignment_2_1_1() { return cProcess_defAssignment_2_1_1; }

		//[Process|QualifiedName]
		public CrossReference getProcess_defProcessCrossReference_2_1_1_0() { return cProcess_defProcessCrossReference_2_1_1_0; }

		//QualifiedName
		public RuleCall getProcess_defProcessQualifiedNameParserRuleCall_2_1_1_0_1() { return cProcess_defProcessQualifiedNameParserRuleCall_2_1_1_0_1; }

		//"EV_InteractionInitiator"
		public Keyword getEV_InteractionInitiatorKeyword_2_2() { return cEV_InteractionInitiatorKeyword_2_2; }

		//initiator=[Role|QualifiedName]
		public Assignment getInitiatorAssignment_2_3() { return cInitiatorAssignment_2_3; }

		//[Role|QualifiedName]
		public CrossReference getInitiatorRoleCrossReference_2_3_0() { return cInitiatorRoleCrossReference_2_3_0; }

		//QualifiedName
		public RuleCall getInitiatorRoleQualifiedNameParserRuleCall_2_3_0_1() { return cInitiatorRoleQualifiedNameParserRuleCall_2_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_4() { return cLeftCurlyBracketKeyword_2_4; }

		//initiator_statemachine=StateMachine
		public Assignment getInitiator_statemachineAssignment_2_5() { return cInitiator_statemachineAssignment_2_5; }

		//StateMachine
		public RuleCall getInitiator_statemachineStateMachineParserRuleCall_2_5_0() { return cInitiator_statemachineStateMachineParserRuleCall_2_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_6() { return cRightCurlyBracketKeyword_2_6; }

		//"EV_InteractionResponder"
		public Keyword getEV_InteractionResponderKeyword_2_7() { return cEV_InteractionResponderKeyword_2_7; }

		//responder=[Role|QualifiedName]
		public Assignment getResponderAssignment_2_8() { return cResponderAssignment_2_8; }

		//[Role|QualifiedName]
		public CrossReference getResponderRoleCrossReference_2_8_0() { return cResponderRoleCrossReference_2_8_0; }

		//QualifiedName
		public RuleCall getResponderRoleQualifiedNameParserRuleCall_2_8_0_1() { return cResponderRoleQualifiedNameParserRuleCall_2_8_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_9() { return cLeftCurlyBracketKeyword_2_9; }

		//responder_statemachine=StateMachine
		public Assignment getResponder_statemachineAssignment_2_10() { return cResponder_statemachineAssignment_2_10; }

		//StateMachine
		public RuleCall getResponder_statemachineStateMachineParserRuleCall_2_10_0() { return cResponder_statemachineStateMachineParserRuleCall_2_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_11() { return cRightCurlyBracketKeyword_2_11; }

		//interactionArtefacts+=InteractionArtefact*
		public Assignment getInteractionArtefactsAssignment_2_12() { return cInteractionArtefactsAssignment_2_12; }

		//InteractionArtefact
		public RuleCall getInteractionArtefactsInteractionArtefactParserRuleCall_2_12_0() { return cInteractionArtefactsInteractionArtefactParserRuleCall_2_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_13() { return cRightCurlyBracketKeyword_2_13; }
	}

	public class InteractionArtefactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractionArtefact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_ArtefactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromRoleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromRoleRoleCrossReference_3_0 = (CrossReference)cFromRoleAssignment_3.eContents().get(0);
		private final RuleCall cFromRoleRoleQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cFromRoleRoleCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToRoleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cToRoleRoleCrossReference_5_0 = (CrossReference)cToRoleAssignment_5.eContents().get(0);
		private final RuleCall cToRoleRoleQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cToRoleRoleCrossReference_5_0.eContents().get(1);
		
		//InteractionArtefact:
		//
		//	"EV_Artefact" name=QualifiedName "from" fromRole=[Role|QualifiedName] "to" toRole=[Role|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"EV_Artefact" name=QualifiedName "from" fromRole=[Role|QualifiedName] "to" toRole=[Role|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"EV_Artefact"
		public Keyword getEV_ArtefactKeyword_0() { return cEV_ArtefactKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//fromRole=[Role|QualifiedName]
		public Assignment getFromRoleAssignment_3() { return cFromRoleAssignment_3; }

		//[Role|QualifiedName]
		public CrossReference getFromRoleRoleCrossReference_3_0() { return cFromRoleRoleCrossReference_3_0; }

		//QualifiedName
		public RuleCall getFromRoleRoleQualifiedNameParserRuleCall_3_0_1() { return cFromRoleRoleQualifiedNameParserRuleCall_3_0_1; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//toRole=[Role|QualifiedName]
		public Assignment getToRoleAssignment_5() { return cToRoleAssignment_5; }

		//[Role|QualifiedName]
		public CrossReference getToRoleRoleCrossReference_5_0() { return cToRoleRoleCrossReference_5_0; }

		//QualifiedName
		public RuleCall getToRoleRoleQualifiedNameParserRuleCall_5_0_1() { return cToRoleRoleQualifiedNameParserRuleCall_5_0_1; }
	}

	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEV_PolicyEnvelopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEV_PolicyValueKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPolicyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPolicySTRINGTerminalRuleCall_4_0 = (RuleCall)cPolicyAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cObligationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cObligationsObjectObligationParserRuleCall_6_0 = (RuleCall)cObligationsAssignment_6.eContents().get(0);
		private final Assignment cObligationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cObligationsRoleObligationParserRuleCall_7_0 = (RuleCall)cObligationsAssignment_7.eContents().get(0);
		private final Assignment cPermissionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPermissionsObjectPermissionParserRuleCall_8_0 = (RuleCall)cPermissionsAssignment_8.eContents().get(0);
		private final Assignment cPermissionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPermissionsRolePermissionParserRuleCall_9_0 = (RuleCall)cPermissionsAssignment_9.eContents().get(0);
		private final Assignment cProhibitionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cProhibitionsObjectProhibitionParserRuleCall_10_0 = (RuleCall)cProhibitionsAssignment_10.eContents().get(0);
		private final Assignment cProhibitionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cProhibitionsRoleProhibitionParserRuleCall_11_0 = (RuleCall)cProhibitionsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEV_ControllingBehaviorKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cProcessAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final CrossReference cProcessProcessCrossReference_15_0 = (CrossReference)cProcessAssignment_15.eContents().get(0);
		private final RuleCall cProcessProcessQualifiedNameParserRuleCall_15_0_1 = (RuleCall)cProcessProcessCrossReference_15_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cEV_AffectedBehaviorKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cAffectedRoleAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cAffectedRoleRoleParserRuleCall_18_0 = (RuleCall)cAffectedRoleAssignment_18.eContents().get(0);
		private final Assignment cAffectedProcessAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cAffectedProcessProcessParserRuleCall_19_0 = (RuleCall)cAffectedProcessAssignment_19.eContents().get(0);
		private final Assignment cAffectedInteractionAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cAffectedInteractionInteractionParserRuleCall_20_0 = (RuleCall)cAffectedInteractionAssignment_20.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		//// PolicyEnvelop has one current PolicyValue, but does the one PolicyValue mean exactly one policy statement? //
		//
		//Policy:
		//
		//	"EV_PolicyEnvelop" name=QualifiedName "{" "EV_PolicyValue" policy=STRING "{" obligations+=ObjectObligation*
		//
		//	obligations+=RoleObligation* permissions+=ObjectPermission* permissions+=RolePermission*
		//
		//	prohibitions+=ObjectProhibition* prohibitions+=RoleProhibition* "}" "EV_ControllingBehavior" "{"
		//
		//	process=[Process|QualifiedName] "}" "EV_AffectedBehavior {" affectedRole+=Role* affectedProcess+=Process*
		//
		//	affectedInteraction+=Interaction* "}" "}";
		public ParserRule getRule() { return rule; }

		//"EV_PolicyEnvelop" name=QualifiedName "{" "EV_PolicyValue" policy=STRING "{" obligations+=ObjectObligation*
		//
		//obligations+=RoleObligation* permissions+=ObjectPermission* permissions+=RolePermission*
		//
		//prohibitions+=ObjectProhibition* prohibitions+=RoleProhibition* "}" "EV_ControllingBehavior" "{"
		//
		//process=[Process|QualifiedName] "}" "EV_AffectedBehavior {" affectedRole+=Role* affectedProcess+=Process*
		//
		//affectedInteraction+=Interaction* "}" "}"
		public Group getGroup() { return cGroup; }

		//"EV_PolicyEnvelop"
		public Keyword getEV_PolicyEnvelopKeyword_0() { return cEV_PolicyEnvelopKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"EV_PolicyValue"
		public Keyword getEV_PolicyValueKeyword_3() { return cEV_PolicyValueKeyword_3; }

		//policy=STRING
		public Assignment getPolicyAssignment_4() { return cPolicyAssignment_4; }

		//STRING
		public RuleCall getPolicySTRINGTerminalRuleCall_4_0() { return cPolicySTRINGTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//obligations+=ObjectObligation*
		public Assignment getObligationsAssignment_6() { return cObligationsAssignment_6; }

		//ObjectObligation
		public RuleCall getObligationsObjectObligationParserRuleCall_6_0() { return cObligationsObjectObligationParserRuleCall_6_0; }

		//obligations+=RoleObligation*
		public Assignment getObligationsAssignment_7() { return cObligationsAssignment_7; }

		//RoleObligation
		public RuleCall getObligationsRoleObligationParserRuleCall_7_0() { return cObligationsRoleObligationParserRuleCall_7_0; }

		//permissions+=ObjectPermission*
		public Assignment getPermissionsAssignment_8() { return cPermissionsAssignment_8; }

		//ObjectPermission
		public RuleCall getPermissionsObjectPermissionParserRuleCall_8_0() { return cPermissionsObjectPermissionParserRuleCall_8_0; }

		//permissions+=RolePermission*
		public Assignment getPermissionsAssignment_9() { return cPermissionsAssignment_9; }

		//RolePermission
		public RuleCall getPermissionsRolePermissionParserRuleCall_9_0() { return cPermissionsRolePermissionParserRuleCall_9_0; }

		//prohibitions+=ObjectProhibition*
		public Assignment getProhibitionsAssignment_10() { return cProhibitionsAssignment_10; }

		//ObjectProhibition
		public RuleCall getProhibitionsObjectProhibitionParserRuleCall_10_0() { return cProhibitionsObjectProhibitionParserRuleCall_10_0; }

		//prohibitions+=RoleProhibition*
		public Assignment getProhibitionsAssignment_11() { return cProhibitionsAssignment_11; }

		//RoleProhibition
		public RuleCall getProhibitionsRoleProhibitionParserRuleCall_11_0() { return cProhibitionsRoleProhibitionParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }

		//"EV_ControllingBehavior"
		public Keyword getEV_ControllingBehaviorKeyword_13() { return cEV_ControllingBehaviorKeyword_13; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }

		//process=[Process|QualifiedName]
		public Assignment getProcessAssignment_15() { return cProcessAssignment_15; }

		//[Process|QualifiedName]
		public CrossReference getProcessProcessCrossReference_15_0() { return cProcessProcessCrossReference_15_0; }

		//QualifiedName
		public RuleCall getProcessProcessQualifiedNameParserRuleCall_15_0_1() { return cProcessProcessQualifiedNameParserRuleCall_15_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }

		//"EV_AffectedBehavior {"
		public Keyword getEV_AffectedBehaviorKeyword_17() { return cEV_AffectedBehaviorKeyword_17; }

		//affectedRole+=Role*
		public Assignment getAffectedRoleAssignment_18() { return cAffectedRoleAssignment_18; }

		//Role
		public RuleCall getAffectedRoleRoleParserRuleCall_18_0() { return cAffectedRoleRoleParserRuleCall_18_0; }

		//affectedProcess+=Process*
		public Assignment getAffectedProcessAssignment_19() { return cAffectedProcessAssignment_19; }

		//Process
		public RuleCall getAffectedProcessProcessParserRuleCall_19_0() { return cAffectedProcessProcessParserRuleCall_19_0; }

		//affectedInteraction+=Interaction*
		public Assignment getAffectedInteractionAssignment_20() { return cAffectedInteractionAssignment_20; }

		//Interaction
		public RuleCall getAffectedInteractionInteractionParserRuleCall_20_0() { return cAffectedInteractionInteractionParserRuleCall_20_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_21() { return cRightCurlyBracketKeyword_21; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
	}

	public class ObjectObligationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectObligation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObligationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInforceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInforceCurrentKeyword_3_0 = (Keyword)cInforceAssignment_3.eContents().get(0);
		private final Keyword cEV_ObjectKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cObjoObjectCrossReference_5_0 = (CrossReference)cObjoAssignment_5.eContents().get(0);
		private final RuleCall cObjoObjectIDTerminalRuleCall_5_0_1 = (RuleCall)cObjoObjectCrossReference_5_0.eContents().get(1);
		private final Keyword cIsObligatedToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cObject_obligationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cObject_obligationSTRINGTerminalRuleCall_7_0 = (RuleCall)cObject_obligationAssignment_7.eContents().get(0);
		
		//ObjectObligation:
		//
		//	"obligation" name=QualifiedName ":" inforce?="current"? "EV_Object" objo=[Object] "is obligated to"
		//
		//	object_obligation=STRING;
		public ParserRule getRule() { return rule; }

		//"obligation" name=QualifiedName ":" inforce?="current"? "EV_Object" objo=[Object] "is obligated to"
		//
		//object_obligation=STRING
		public Group getGroup() { return cGroup; }

		//"obligation"
		public Keyword getObligationKeyword_0() { return cObligationKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//inforce?="current"?
		public Assignment getInforceAssignment_3() { return cInforceAssignment_3; }

		//"current"
		public Keyword getInforceCurrentKeyword_3_0() { return cInforceCurrentKeyword_3_0; }

		//"EV_Object"
		public Keyword getEV_ObjectKeyword_4() { return cEV_ObjectKeyword_4; }

		//objo=[Object]
		public Assignment getObjoAssignment_5() { return cObjoAssignment_5; }

		//[Object]
		public CrossReference getObjoObjectCrossReference_5_0() { return cObjoObjectCrossReference_5_0; }

		//ID
		public RuleCall getObjoObjectIDTerminalRuleCall_5_0_1() { return cObjoObjectIDTerminalRuleCall_5_0_1; }

		//"is obligated to"
		public Keyword getIsObligatedToKeyword_6() { return cIsObligatedToKeyword_6; }

		//object_obligation=STRING
		public Assignment getObject_obligationAssignment_7() { return cObject_obligationAssignment_7; }

		//STRING
		public RuleCall getObject_obligationSTRINGTerminalRuleCall_7_0() { return cObject_obligationSTRINGTerminalRuleCall_7_0; }
	}

	public class RoleObligationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleObligation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObligationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInforceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInforceCurrentKeyword_3_0 = (Keyword)cInforceAssignment_3.eContents().get(0);
		private final Keyword cEV_RoleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRoleoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRoleoRoleCrossReference_5_0 = (CrossReference)cRoleoAssignment_5.eContents().get(0);
		private final RuleCall cRoleoRoleQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cRoleoRoleCrossReference_5_0.eContents().get(1);
		private final Keyword cIsObligatedToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRole_obligationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRole_obligationSTRINGTerminalRuleCall_7_0 = (RuleCall)cRole_obligationAssignment_7.eContents().get(0);
		
		//RoleObligation:
		//
		//	"obligation" name=QualifiedName ":" inforce?="current"? "EV_Role" roleo=[Role|QualifiedName] "is obligated to"
		//
		//	role_obligation=STRING;
		public ParserRule getRule() { return rule; }

		//"obligation" name=QualifiedName ":" inforce?="current"? "EV_Role" roleo=[Role|QualifiedName] "is obligated to"
		//
		//role_obligation=STRING
		public Group getGroup() { return cGroup; }

		//"obligation"
		public Keyword getObligationKeyword_0() { return cObligationKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//inforce?="current"?
		public Assignment getInforceAssignment_3() { return cInforceAssignment_3; }

		//"current"
		public Keyword getInforceCurrentKeyword_3_0() { return cInforceCurrentKeyword_3_0; }

		//"EV_Role"
		public Keyword getEV_RoleKeyword_4() { return cEV_RoleKeyword_4; }

		//roleo=[Role|QualifiedName]
		public Assignment getRoleoAssignment_5() { return cRoleoAssignment_5; }

		//[Role|QualifiedName]
		public CrossReference getRoleoRoleCrossReference_5_0() { return cRoleoRoleCrossReference_5_0; }

		//QualifiedName
		public RuleCall getRoleoRoleQualifiedNameParserRuleCall_5_0_1() { return cRoleoRoleQualifiedNameParserRuleCall_5_0_1; }

		//"is obligated to"
		public Keyword getIsObligatedToKeyword_6() { return cIsObligatedToKeyword_6; }

		//role_obligation=STRING
		public Assignment getRole_obligationAssignment_7() { return cRole_obligationAssignment_7; }

		//STRING
		public RuleCall getRole_obligationSTRINGTerminalRuleCall_7_0() { return cRole_obligationSTRINGTerminalRuleCall_7_0; }
	}

	public class ObjectPermissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectPermission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPermissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInforceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInforceCurrentKeyword_3_0 = (Keyword)cInforceAssignment_3.eContents().get(0);
		private final Keyword cEV_ObjectKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cObjpObjectCrossReference_5_0 = (CrossReference)cObjpAssignment_5.eContents().get(0);
		private final RuleCall cObjpObjectQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cObjpObjectCrossReference_5_0.eContents().get(1);
		private final Keyword cIsPermittedToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cObject_permissionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cObject_permissionSTRINGTerminalRuleCall_7_0 = (RuleCall)cObject_permissionAssignment_7.eContents().get(0);
		
		//ObjectPermission:
		//
		//	"permission" name=QualifiedName ":" inforce?="current"? "EV_Object" objp=[Object|QualifiedName] "is permitted to"
		//
		//	object_permission=STRING;
		public ParserRule getRule() { return rule; }

		//"permission" name=QualifiedName ":" inforce?="current"? "EV_Object" objp=[Object|QualifiedName] "is permitted to"
		//
		//object_permission=STRING
		public Group getGroup() { return cGroup; }

		//"permission"
		public Keyword getPermissionKeyword_0() { return cPermissionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//inforce?="current"?
		public Assignment getInforceAssignment_3() { return cInforceAssignment_3; }

		//"current"
		public Keyword getInforceCurrentKeyword_3_0() { return cInforceCurrentKeyword_3_0; }

		//"EV_Object"
		public Keyword getEV_ObjectKeyword_4() { return cEV_ObjectKeyword_4; }

		//objp=[Object|QualifiedName]
		public Assignment getObjpAssignment_5() { return cObjpAssignment_5; }

		//[Object|QualifiedName]
		public CrossReference getObjpObjectCrossReference_5_0() { return cObjpObjectCrossReference_5_0; }

		//QualifiedName
		public RuleCall getObjpObjectQualifiedNameParserRuleCall_5_0_1() { return cObjpObjectQualifiedNameParserRuleCall_5_0_1; }

		//"is permitted to"
		public Keyword getIsPermittedToKeyword_6() { return cIsPermittedToKeyword_6; }

		//object_permission=STRING
		public Assignment getObject_permissionAssignment_7() { return cObject_permissionAssignment_7; }

		//STRING
		public RuleCall getObject_permissionSTRINGTerminalRuleCall_7_0() { return cObject_permissionSTRINGTerminalRuleCall_7_0; }
	}

	public class RolePermissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RolePermission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPermissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInforceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInforceCurrentKeyword_3_0 = (Keyword)cInforceAssignment_3.eContents().get(0);
		private final Keyword cEV_RoleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRolepAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRolepRoleCrossReference_5_0 = (CrossReference)cRolepAssignment_5.eContents().get(0);
		private final RuleCall cRolepRoleQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cRolepRoleCrossReference_5_0.eContents().get(1);
		private final Keyword cIsPermittedToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRole_permissionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRole_permissionSTRINGTerminalRuleCall_7_0 = (RuleCall)cRole_permissionAssignment_7.eContents().get(0);
		
		//RolePermission:
		//
		//	"permission" name=QualifiedName ":" inforce?="current"? "EV_Role" rolep=[Role|QualifiedName] "is permitted to"
		//
		//	role_permission=STRING;
		public ParserRule getRule() { return rule; }

		//"permission" name=QualifiedName ":" inforce?="current"? "EV_Role" rolep=[Role|QualifiedName] "is permitted to"
		//
		//role_permission=STRING
		public Group getGroup() { return cGroup; }

		//"permission"
		public Keyword getPermissionKeyword_0() { return cPermissionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//inforce?="current"?
		public Assignment getInforceAssignment_3() { return cInforceAssignment_3; }

		//"current"
		public Keyword getInforceCurrentKeyword_3_0() { return cInforceCurrentKeyword_3_0; }

		//"EV_Role"
		public Keyword getEV_RoleKeyword_4() { return cEV_RoleKeyword_4; }

		//rolep=[Role|QualifiedName]
		public Assignment getRolepAssignment_5() { return cRolepAssignment_5; }

		//[Role|QualifiedName]
		public CrossReference getRolepRoleCrossReference_5_0() { return cRolepRoleCrossReference_5_0; }

		//QualifiedName
		public RuleCall getRolepRoleQualifiedNameParserRuleCall_5_0_1() { return cRolepRoleQualifiedNameParserRuleCall_5_0_1; }

		//"is permitted to"
		public Keyword getIsPermittedToKeyword_6() { return cIsPermittedToKeyword_6; }

		//role_permission=STRING
		public Assignment getRole_permissionAssignment_7() { return cRole_permissionAssignment_7; }

		//STRING
		public RuleCall getRole_permissionSTRINGTerminalRuleCall_7_0() { return cRole_permissionSTRINGTerminalRuleCall_7_0; }
	}

	public class ObjectProhibitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectProhibition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProhibitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInforceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInforceCurrentKeyword_3_0 = (Keyword)cInforceAssignment_3.eContents().get(0);
		private final Keyword cEV_ObjectKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cObjpObjectCrossReference_5_0 = (CrossReference)cObjpAssignment_5.eContents().get(0);
		private final RuleCall cObjpObjectQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cObjpObjectCrossReference_5_0.eContents().get(1);
		private final Keyword cIsProhibitedToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cObject_prohibitionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cObject_prohibitionSTRINGTerminalRuleCall_7_0 = (RuleCall)cObject_prohibitionAssignment_7.eContents().get(0);
		
		//ObjectProhibition:
		//
		//	"prohibition" name=QualifiedName ":" inforce?="current"? "EV_Object" objp=[Object|QualifiedName] "is prohibited to"
		//
		//	object_prohibition=STRING;
		public ParserRule getRule() { return rule; }

		//"prohibition" name=QualifiedName ":" inforce?="current"? "EV_Object" objp=[Object|QualifiedName] "is prohibited to"
		//
		//object_prohibition=STRING
		public Group getGroup() { return cGroup; }

		//"prohibition"
		public Keyword getProhibitionKeyword_0() { return cProhibitionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//inforce?="current"?
		public Assignment getInforceAssignment_3() { return cInforceAssignment_3; }

		//"current"
		public Keyword getInforceCurrentKeyword_3_0() { return cInforceCurrentKeyword_3_0; }

		//"EV_Object"
		public Keyword getEV_ObjectKeyword_4() { return cEV_ObjectKeyword_4; }

		//objp=[Object|QualifiedName]
		public Assignment getObjpAssignment_5() { return cObjpAssignment_5; }

		//[Object|QualifiedName]
		public CrossReference getObjpObjectCrossReference_5_0() { return cObjpObjectCrossReference_5_0; }

		//QualifiedName
		public RuleCall getObjpObjectQualifiedNameParserRuleCall_5_0_1() { return cObjpObjectQualifiedNameParserRuleCall_5_0_1; }

		//"is prohibited to"
		public Keyword getIsProhibitedToKeyword_6() { return cIsProhibitedToKeyword_6; }

		//object_prohibition=STRING
		public Assignment getObject_prohibitionAssignment_7() { return cObject_prohibitionAssignment_7; }

		//STRING
		public RuleCall getObject_prohibitionSTRINGTerminalRuleCall_7_0() { return cObject_prohibitionSTRINGTerminalRuleCall_7_0; }
	}

	public class RoleProhibitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleProhibition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProhibitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInforceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInforceCurrentKeyword_3_0 = (Keyword)cInforceAssignment_3.eContents().get(0);
		private final Keyword cEV_RoleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRolepAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRolepRoleCrossReference_5_0 = (CrossReference)cRolepAssignment_5.eContents().get(0);
		private final RuleCall cRolepRoleQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cRolepRoleCrossReference_5_0.eContents().get(1);
		private final Keyword cIsProhibitedToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRole_prohibitionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRole_prohibitionSTRINGTerminalRuleCall_7_0 = (RuleCall)cRole_prohibitionAssignment_7.eContents().get(0);
		
		//RoleProhibition:
		//
		//	"prohibition" name=QualifiedName ":" inforce?="current"? "EV_Role" rolep=[Role|QualifiedName] "is prohibited to"
		//
		//	role_prohibition=STRING;
		public ParserRule getRule() { return rule; }

		//"prohibition" name=QualifiedName ":" inforce?="current"? "EV_Role" rolep=[Role|QualifiedName] "is prohibited to"
		//
		//role_prohibition=STRING
		public Group getGroup() { return cGroup; }

		//"prohibition"
		public Keyword getProhibitionKeyword_0() { return cProhibitionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//inforce?="current"?
		public Assignment getInforceAssignment_3() { return cInforceAssignment_3; }

		//"current"
		public Keyword getInforceCurrentKeyword_3_0() { return cInforceCurrentKeyword_3_0; }

		//"EV_Role"
		public Keyword getEV_RoleKeyword_4() { return cEV_RoleKeyword_4; }

		//rolep=[Role|QualifiedName]
		public Assignment getRolepAssignment_5() { return cRolepAssignment_5; }

		//[Role|QualifiedName]
		public CrossReference getRolepRoleCrossReference_5_0() { return cRolepRoleCrossReference_5_0; }

		//QualifiedName
		public RuleCall getRolepRoleQualifiedNameParserRuleCall_5_0_1() { return cRolepRoleQualifiedNameParserRuleCall_5_0_1; }

		//"is prohibited to"
		public Keyword getIsProhibitedToKeyword_6() { return cIsProhibitedToKeyword_6; }

		//role_prohibition=STRING
		public Assignment getRole_prohibitionAssignment_7() { return cRole_prohibitionAssignment_7; }

		//STRING
		public RuleCall getRole_prohibitionSTRINGTerminalRuleCall_7_0() { return cRole_prohibitionSTRINGTerminalRuleCall_7_0; }
	}

	public class IV_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IV_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInvariantSchemaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvariantSchemaInvariantSchemaParserRuleCall_3_0 = (RuleCall)cInvariantSchemaAssignment_3.eContents().get(0);
		private final Assignment cDynamicSchemaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDynamicSchemaDynamicSchemaParserRuleCall_4_0 = (RuleCall)cDynamicSchemaAssignment_4.eContents().get(0);
		private final Assignment cStaticSchemaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStaticSchemaStaticSchemaParserRuleCall_5_0 = (RuleCall)cStaticSchemaAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		//IV_spec:
		//
		//	"information" name=QualifiedName "{" invariantSchema+=InvariantSchema* dynamicSchema+=DynamicSchema*
		//
		//	staticSchema+=StaticSchema* "}";
		public ParserRule getRule() { return rule; }

		//"information" name=QualifiedName "{" invariantSchema+=InvariantSchema* dynamicSchema+=DynamicSchema*
		//
		//staticSchema+=StaticSchema* "}"
		public Group getGroup() { return cGroup; }

		//"information"
		public Keyword getInformationKeyword_0() { return cInformationKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//invariantSchema+=InvariantSchema*
		public Assignment getInvariantSchemaAssignment_3() { return cInvariantSchemaAssignment_3; }

		//InvariantSchema
		public RuleCall getInvariantSchemaInvariantSchemaParserRuleCall_3_0() { return cInvariantSchemaInvariantSchemaParserRuleCall_3_0; }

		//dynamicSchema+=DynamicSchema*
		public Assignment getDynamicSchemaAssignment_4() { return cDynamicSchemaAssignment_4; }

		//DynamicSchema
		public RuleCall getDynamicSchemaDynamicSchemaParserRuleCall_4_0() { return cDynamicSchemaDynamicSchemaParserRuleCall_4_0; }

		//staticSchema+=StaticSchema*
		public Assignment getStaticSchemaAssignment_5() { return cStaticSchemaAssignment_5; }

		//StaticSchema
		public RuleCall getStaticSchemaStaticSchemaParserRuleCall_5_0() { return cStaticSchemaStaticSchemaParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InvariantSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvariantSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsObjectParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Assignment cActionTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionTypesActionTypeParserRuleCall_4_0 = (RuleCall)cActionTypesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InvariantSchema:
		//
		//	"invariant schema" name=QualifiedName "{" objects+=Object* actionTypes+=ActionType* "}";
		public ParserRule getRule() { return rule; }

		//"invariant schema" name=QualifiedName "{" objects+=Object* actionTypes+=ActionType* "}"
		public Group getGroup() { return cGroup; }

		//"invariant schema"
		public Keyword getInvariantSchemaKeyword_0() { return cInvariantSchemaKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//objects+=Object*
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }

		//Object
		public RuleCall getObjectsObjectParserRuleCall_3_0() { return cObjectsObjectParserRuleCall_3_0; }

		//actionTypes+=ActionType*
		public Assignment getActionTypesAssignment_4() { return cActionTypesAssignment_4; }

		//ActionType
		public RuleCall getActionTypesActionTypeParserRuleCall_4_0() { return cActionTypesActionTypeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DynamicSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDynamicSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateMachineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateMachineStateMachineParserRuleCall_3_0 = (RuleCall)cStateMachineAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DynamicSchema:
		//
		//	"dynamic schema" name=QualifiedName "{" stateMachine=StateMachine "}";
		public ParserRule getRule() { return rule; }

		//"dynamic schema" name=QualifiedName "{" stateMachine=StateMachine "}"
		public Group getGroup() { return cGroup; }

		//"dynamic schema"
		public Keyword getDynamicSchemaKeyword_0() { return cDynamicSchemaKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//stateMachine=StateMachine
		public Assignment getStateMachineAssignment_3() { return cStateMachineAssignment_3; }

		//StateMachine
		public RuleCall getStateMachineStateMachineParserRuleCall_3_0() { return cStateMachineStateMachineParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StaticSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLocationInTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeSTRINGTerminalRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Assignment cObjectInstancesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cObjectInstancesObjectInstanceParserRuleCall_6_0 = (RuleCall)cObjectInstancesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StaticSchema:
		//
		//	"static schema" name=QualifiedName "{" "locationInTime" ":" time=STRING objectInstances+=ObjectInstance* "}";
		public ParserRule getRule() { return rule; }

		//"static schema" name=QualifiedName "{" "locationInTime" ":" time=STRING objectInstances+=ObjectInstance* "}"
		public Group getGroup() { return cGroup; }

		//"static schema"
		public Keyword getStaticSchemaKeyword_0() { return cStaticSchemaKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"locationInTime"
		public Keyword getLocationInTimeKeyword_3() { return cLocationInTimeKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//time=STRING
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }

		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_5_0() { return cTimeSTRINGTerminalRuleCall_5_0; }

		//objectInstances+=ObjectInstance*
		public Assignment getObjectInstancesAssignment_6() { return cObjectInstancesAssignment_6; }

		//ObjectInstance
		public RuleCall getObjectInstancesObjectInstanceParserRuleCall_6_0() { return cObjectInstancesObjectInstanceParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ObjectInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeNameObjectCrossReference_1_0 = (CrossReference)cTypeNameAssignment_1.eContents().get(0);
		private final RuleCall cTypeNameObjectQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeNameObjectCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyInstancesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyInstancesPropertyInstanceParserRuleCall_4_0 = (RuleCall)cPropertyInstancesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObjectInstance:
		//
		//	"instance" typeName=[Object|QualifiedName] name=QualifiedName "{" propertyInstances+=PropertyInstance* "}";
		public ParserRule getRule() { return rule; }

		//"instance" typeName=[Object|QualifiedName] name=QualifiedName "{" propertyInstances+=PropertyInstance* "}"
		public Group getGroup() { return cGroup; }

		//"instance"
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//typeName=[Object|QualifiedName]
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//[Object|QualifiedName]
		public CrossReference getTypeNameObjectCrossReference_1_0() { return cTypeNameObjectCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeNameObjectQualifiedNameParserRuleCall_1_0_1() { return cTypeNameObjectQualifiedNameParserRuleCall_1_0_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//propertyInstances+=PropertyInstance*
		public Assignment getPropertyInstancesAssignment_4() { return cPropertyInstancesAssignment_4; }

		//PropertyInstance
		public RuleCall getPropertyInstancesPropertyInstanceParserRuleCall_4_0() { return cPropertyInstancesPropertyInstanceParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PropertyInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypePropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypePropertyPropertyCrossReference_0_0 = (CrossReference)cTypePropertyAssignment_0.eContents().get(0);
		private final RuleCall cTypePropertyPropertyQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypePropertyPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cPropertyValueAssignment_2.eContents().get(0);
		
		//PropertyInstance:
		//
		//	typeProperty=[Property|QualifiedName] ":" propertyValue=STRING;
		public ParserRule getRule() { return rule; }

		//typeProperty=[Property|QualifiedName] ":" propertyValue=STRING
		public Group getGroup() { return cGroup; }

		//typeProperty=[Property|QualifiedName]
		public Assignment getTypePropertyAssignment_0() { return cTypePropertyAssignment_0; }

		//[Property|QualifiedName]
		public CrossReference getTypePropertyPropertyCrossReference_0_0() { return cTypePropertyPropertyCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypePropertyPropertyQualifiedNameParserRuleCall_0_0_1() { return cTypePropertyPropertyQualifiedNameParserRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//propertyValue=STRING
		public Assignment getPropertyValueAssignment_2() { return cPropertyValueAssignment_2; }

		//STRING
		public RuleCall getPropertyValueSTRINGTerminalRuleCall_2_0() { return cPropertyValueSTRINGTerminalRuleCall_2_0; }
	}

	public class ActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionTypesActionPropertyParserRuleCall_3_0 = (RuleCall)cActionTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActionType:
		//
		//	"action type" name=QualifiedName "{" actionTypes+=ActionProperty* "}";
		public ParserRule getRule() { return rule; }

		//"action type" name=QualifiedName "{" actionTypes+=ActionProperty* "}"
		public Group getGroup() { return cGroup; }

		//"action type"
		public Keyword getActionTypeKeyword_0() { return cActionTypeKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//actionTypes+=ActionProperty*
		public Assignment getActionTypesAssignment_3() { return cActionTypesAssignment_3; }

		//ActionProperty
		public RuleCall getActionTypesActionPropertyParserRuleCall_3_0() { return cActionTypesActionPropertyParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeModelElementCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeModelElementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeModelElementCrossReference_3_0.eContents().get(1);
		private final Assignment cManyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_4_0 = (Keyword)cManyAssignment_4.eContents().get(0);
		
		//ActionProperty:
		//
		//	"action property" name=QualifiedName ":" type=[ModelElement|QualifiedName] many?="[]"?;
		public ParserRule getRule() { return rule; }

		//"action property" name=QualifiedName ":" type=[ModelElement|QualifiedName] many?="[]"?
		public Group getGroup() { return cGroup; }

		//"action property"
		public Keyword getActionPropertyKeyword_0() { return cActionPropertyKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[ModelElement|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ModelElement|QualifiedName]
		public CrossReference getTypeModelElementCrossReference_3_0() { return cTypeModelElementCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeModelElementQualifiedNameParserRuleCall_3_0_1() { return cTypeModelElementQualifiedNameParserRuleCall_3_0_1; }

		//many?="[]"?
		public Assignment getManyAssignment_4() { return cManyAssignment_4; }

		//"[]"
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_4_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_4_0; }
	}

	public class CV_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CV_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputationalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCdatatypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCdatatypesTypeParserRuleCall_3_0 = (RuleCall)cCdatatypesAssignment_3.eContents().get(0);
		private final Assignment cSignatureDefsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSignatureDefsSignatureDefParserRuleCall_4_0 = (RuleCall)cSignatureDefsAssignment_4.eContents().get(0);
		private final Assignment cObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectsObjectParserRuleCall_5_0 = (RuleCall)cObjectsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		//CV_spec:
		//
		//	"computational" name=QualifiedName "{" cdatatypes+=Type* signatureDefs+=SignatureDef* objects+=Object* "}";
		public ParserRule getRule() { return rule; }

		//"computational" name=QualifiedName "{" cdatatypes+=Type* signatureDefs+=SignatureDef* objects+=Object* "}"
		public Group getGroup() { return cGroup; }

		//"computational"
		public Keyword getComputationalKeyword_0() { return cComputationalKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//cdatatypes+=Type*
		public Assignment getCdatatypesAssignment_3() { return cCdatatypesAssignment_3; }

		//Type
		public RuleCall getCdatatypesTypeParserRuleCall_3_0() { return cCdatatypesTypeParserRuleCall_3_0; }

		//signatureDefs+=SignatureDef*
		public Assignment getSignatureDefsAssignment_4() { return cSignatureDefsAssignment_4; }

		//SignatureDef
		public RuleCall getSignatureDefsSignatureDefParserRuleCall_4_0() { return cSignatureDefsSignatureDefParserRuleCall_4_0; }

		//objects+=Object*
		public Assignment getObjectsAssignment_5() { return cObjectsAssignment_5; }

		//Object
		public RuleCall getObjectsObjectParserRuleCall_5_0() { return cObjectsObjectParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class NV_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NV_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEngineeringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHostNodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHostNodeHostNodeParserRuleCall_3_0 = (RuleCall)cHostNodeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		//NV_spec:
		//
		//	"engineering" name=QualifiedName "{" hostNode+=HostNode* "}";
		public ParserRule getRule() { return rule; }

		//"engineering" name=QualifiedName "{" hostNode+=HostNode* "}"
		public Group getGroup() { return cGroup; }

		//"engineering"
		public Keyword getEngineeringKeyword_0() { return cEngineeringKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//hostNode+=HostNode*
		public Assignment getHostNodeAssignment_3() { return cHostNodeAssignment_3; }

		//HostNode
		public RuleCall getHostNodeHostNodeParserRuleCall_3_0() { return cHostNodeHostNodeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class HostNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HostNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinkAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinkLinkParserRuleCall_3_0 = (RuleCall)cLinkAssignment_3.eContents().get(0);
		private final Assignment cSignatureDefsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSignatureDefsSignatureDefParserRuleCall_4_0 = (RuleCall)cSignatureDefsAssignment_4.eContents().get(0);
		private final Assignment cObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectsObjectParserRuleCall_5_0 = (RuleCall)cObjectsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//HostNode:
		//
		//	"node" name=QualifiedName "{" link+=Link* signatureDefs+=SignatureDef* objects+=Object* "}";
		public ParserRule getRule() { return rule; }

		//"node" name=QualifiedName "{" link+=Link* signatureDefs+=SignatureDef* objects+=Object* "}"
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//link+=Link*
		public Assignment getLinkAssignment_3() { return cLinkAssignment_3; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_3_0() { return cLinkLinkParserRuleCall_3_0; }

		//signatureDefs+=SignatureDef*
		public Assignment getSignatureDefsAssignment_4() { return cSignatureDefsAssignment_4; }

		//SignatureDef
		public RuleCall getSignatureDefsSignatureDefParserRuleCall_4_0() { return cSignatureDefsSignatureDefParserRuleCall_4_0; }

		//objects+=Object*
		public Assignment getObjectsAssignment_5() { return cObjectsAssignment_5; }

		//Object
		public RuleCall getObjectsObjectParserRuleCall_5_0() { return cObjectsObjectParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHostNodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cHostNodeHostNodeCrossReference_3_0 = (CrossReference)cHostNodeAssignment_3.eContents().get(0);
		private final RuleCall cHostNodeHostNodeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cHostNodeHostNodeCrossReference_3_0.eContents().get(1);
		
		//Link:
		//
		//	"link" name=QualifiedName ":" hostNode=[HostNode|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"link" name=QualifiedName ":" hostNode=[HostNode|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//hostNode=[HostNode|QualifiedName]
		public Assignment getHostNodeAssignment_3() { return cHostNodeAssignment_3; }

		//[HostNode|QualifiedName]
		public CrossReference getHostNodeHostNodeCrossReference_3_0() { return cHostNodeHostNodeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getHostNodeHostNodeQualifiedNameParserRuleCall_3_0_1() { return cHostNodeHostNodeQualifiedNameParserRuleCall_3_0_1; }
	}

	public class TV_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TV_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTechnologyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsObjectParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Assignment cImplementableStandardsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImplementableStandardsImplementableStandardParserRuleCall_4_0 = (RuleCall)cImplementableStandardsAssignment_4.eContents().get(0);
		private final Assignment cIxitsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIxitsIXITParserRuleCall_5_0 = (RuleCall)cIxitsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		//TV_spec:
		//
		//	"technology" name=QualifiedName "{" objects+=Object* implementableStandards+=ImplementableStandard* ixits+=IXIT* "}";
		public ParserRule getRule() { return rule; }

		//"technology" name=QualifiedName "{" objects+=Object* implementableStandards+=ImplementableStandard* ixits+=IXIT* "}"
		public Group getGroup() { return cGroup; }

		//"technology"
		public Keyword getTechnologyKeyword_0() { return cTechnologyKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//objects+=Object*
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }

		//Object
		public RuleCall getObjectsObjectParserRuleCall_3_0() { return cObjectsObjectParserRuleCall_3_0; }

		//implementableStandards+=ImplementableStandard*
		public Assignment getImplementableStandardsAssignment_4() { return cImplementableStandardsAssignment_4; }

		//ImplementableStandard
		public RuleCall getImplementableStandardsImplementableStandardParserRuleCall_4_0() { return cImplementableStandardsImplementableStandardParserRuleCall_4_0; }

		//ixits+=IXIT*
		public Assignment getIxitsAssignment_5() { return cIxitsAssignment_5; }

		//IXIT
		public RuleCall getIxitsIXITParserRuleCall_5_0() { return cIxitsIXITParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ImplementableStandardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementableStandard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplementableStandardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ImplementableStandard:
		//
		//	"implementable standard" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"implementable standard" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"implementable standard"
		public Keyword getImplementableStandardKeyword_0() { return cImplementableStandardKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class IXITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IXIT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIXITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//IXIT:
		//
		//	"IXIT" description=STRING;
		public ParserRule getRule() { return rule; }

		//"IXIT" description=STRING
		public Group getGroup() { return cGroup; }

		//"IXIT"
		public Keyword getIXITKeyword_0() { return cIXITKeyword_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
	}

	public class Corr_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Corr_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCorrespondenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cViewpoint1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cViewpoint1Alternatives_4_0 = (Alternatives)cViewpoint1Assignment_4.eContents().get(0);
		private final Keyword cViewpoint1EnterpriseKeyword_4_0_0 = (Keyword)cViewpoint1Alternatives_4_0.eContents().get(0);
		private final Keyword cViewpoint1InformationKeyword_4_0_1 = (Keyword)cViewpoint1Alternatives_4_0.eContents().get(1);
		private final Keyword cViewpoint1ComputationalKeyword_4_0_2 = (Keyword)cViewpoint1Alternatives_4_0.eContents().get(2);
		private final Keyword cViewpoint1EngineeringKeyword_4_0_3 = (Keyword)cViewpoint1Alternatives_4_0.eContents().get(3);
		private final Keyword cViewpoint1TechnololgyKeyword_4_0_4 = (Keyword)cViewpoint1Alternatives_4_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndpoints1Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndpoints1EndPointParserRuleCall_6_0 = (RuleCall)cEndpoints1Assignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cToKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cViewpoint2Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Alternatives cViewpoint2Alternatives_9_0 = (Alternatives)cViewpoint2Assignment_9.eContents().get(0);
		private final Keyword cViewpoint2EnterpriseKeyword_9_0_0 = (Keyword)cViewpoint2Alternatives_9_0.eContents().get(0);
		private final Keyword cViewpoint2InformationKeyword_9_0_1 = (Keyword)cViewpoint2Alternatives_9_0.eContents().get(1);
		private final Keyword cViewpoint2ComputationalKeyword_9_0_2 = (Keyword)cViewpoint2Alternatives_9_0.eContents().get(2);
		private final Keyword cViewpoint2EngineeringKeyword_9_0_3 = (Keyword)cViewpoint2Alternatives_9_0.eContents().get(3);
		private final Keyword cViewpoint2TechnololgyKeyword_9_0_4 = (Keyword)cViewpoint2Alternatives_9_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cEndpoints2Assignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cEndpoints2EndPointParserRuleCall_11_0 = (RuleCall)cEndpoints2Assignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cDescriptionKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cDescriptionAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_14_0 = (RuleCall)cDescriptionAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		//Corr_spec:
		//
		//	"correspondence" name=QualifiedName "{" "from:" viewpoint1=("enterprise" | "information" | "computational" |
		//
		//	"engineering" | "technololgy") "{" endpoints1+=EndPoint* "}" "to:" viewpoint2=("enterprise" | "information" |
		//
		//	"computational" | "engineering" | "technololgy") "{" endpoints2+=EndPoint* "}" "description" description=STRING "}";
		public ParserRule getRule() { return rule; }

		//"correspondence" name=QualifiedName "{" "from:" viewpoint1=("enterprise" | "information" | "computational" |
		//
		//"engineering" | "technololgy") "{" endpoints1+=EndPoint* "}" "to:" viewpoint2=("enterprise" | "information" |
		//
		//"computational" | "engineering" | "technololgy") "{" endpoints2+=EndPoint* "}" "description" description=STRING "}"
		public Group getGroup() { return cGroup; }

		//"correspondence"
		public Keyword getCorrespondenceKeyword_0() { return cCorrespondenceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"from:"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }

		//viewpoint1=("enterprise" | "information" | "computational" | "engineering" | "technololgy")
		public Assignment getViewpoint1Assignment_4() { return cViewpoint1Assignment_4; }

		//"enterprise" | "information" | "computational" | "engineering" | "technololgy"
		public Alternatives getViewpoint1Alternatives_4_0() { return cViewpoint1Alternatives_4_0; }

		//"enterprise"
		public Keyword getViewpoint1EnterpriseKeyword_4_0_0() { return cViewpoint1EnterpriseKeyword_4_0_0; }

		//"information"
		public Keyword getViewpoint1InformationKeyword_4_0_1() { return cViewpoint1InformationKeyword_4_0_1; }

		//"computational"
		public Keyword getViewpoint1ComputationalKeyword_4_0_2() { return cViewpoint1ComputationalKeyword_4_0_2; }

		//"engineering"
		public Keyword getViewpoint1EngineeringKeyword_4_0_3() { return cViewpoint1EngineeringKeyword_4_0_3; }

		//"technololgy"
		public Keyword getViewpoint1TechnololgyKeyword_4_0_4() { return cViewpoint1TechnololgyKeyword_4_0_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//endpoints1+=EndPoint*
		public Assignment getEndpoints1Assignment_6() { return cEndpoints1Assignment_6; }

		//EndPoint
		public RuleCall getEndpoints1EndPointParserRuleCall_6_0() { return cEndpoints1EndPointParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"to:"
		public Keyword getToKeyword_8() { return cToKeyword_8; }

		//viewpoint2=("enterprise" | "information" | "computational" | "engineering" | "technololgy")
		public Assignment getViewpoint2Assignment_9() { return cViewpoint2Assignment_9; }

		//"enterprise" | "information" | "computational" | "engineering" | "technololgy"
		public Alternatives getViewpoint2Alternatives_9_0() { return cViewpoint2Alternatives_9_0; }

		//"enterprise"
		public Keyword getViewpoint2EnterpriseKeyword_9_0_0() { return cViewpoint2EnterpriseKeyword_9_0_0; }

		//"information"
		public Keyword getViewpoint2InformationKeyword_9_0_1() { return cViewpoint2InformationKeyword_9_0_1; }

		//"computational"
		public Keyword getViewpoint2ComputationalKeyword_9_0_2() { return cViewpoint2ComputationalKeyword_9_0_2; }

		//"engineering"
		public Keyword getViewpoint2EngineeringKeyword_9_0_3() { return cViewpoint2EngineeringKeyword_9_0_3; }

		//"technololgy"
		public Keyword getViewpoint2TechnololgyKeyword_9_0_4() { return cViewpoint2TechnololgyKeyword_9_0_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//endpoints2+=EndPoint*
		public Assignment getEndpoints2Assignment_11() { return cEndpoints2Assignment_11; }

		//EndPoint
		public RuleCall getEndpoints2EndPointParserRuleCall_11_0() { return cEndpoints2EndPointParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }

		//"description"
		public Keyword getDescriptionKeyword_13() { return cDescriptionKeyword_13; }

		//description=STRING
		public Assignment getDescriptionAssignment_14() { return cDescriptionAssignment_14; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_14_0() { return cDescriptionSTRINGTerminalRuleCall_14_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class EndPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeModelElementCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeModelElementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeModelElementCrossReference_1_0.eContents().get(1);
		
		//EndPoint:
		//
		//	"endpoint" type=[ModelElement|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"endpoint" type=[ModelElement|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"endpoint"
		public Keyword getEndpointKeyword_0() { return cEndpointKeyword_0; }

		//type=[ModelElement|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ModelElement|QualifiedName]
		public CrossReference getTypeModelElementCrossReference_1_0() { return cTypeModelElementCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeModelElementQualifiedNameParserRuleCall_1_0_1() { return cTypeModelElementQualifiedNameParserRuleCall_1_0_1; }
	}
	
	
	private ModelElements pModel;
	private ModelElementElements pModelElement;
	private TypeElements pType;
	private SimpleTypeElements pSimpleType;
	private EnumerationElements pEnumeration;
	private ImportElements pImport;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private PackageDeclarationElements pPackageDeclaration;
	private SpecElements pSpec;
	private ObjectElements pObject;
	private PropertyElements pProperty;
	private StateMachineElements pStateMachine;
	private EventElements pEvent;
	private CommandElements pCommand;
	private StateElements pState;
	private StateTransitionElements pStateTransition;
	private InterfaceElements pInterface;
	private SignatureReferenceElements pSignatureReference;
	private SignatureDefElements pSignatureDef;
	private ParamElements pParam;
	private EV_specElements pEV_spec;
	private CommunityContractElements pCommunityContract;
	private CommunityElements pCommunity;
	private FieldOfApplicationElements pFieldOfApplication;
	private ObjectiveElements pObjective;
	private RoleElements pRole;
	private OR_RelationElements pOR_Relation;
	private ProcessElements pProcess;
	private LaneElements pLane;
	private NodeElements pNode;
	private DecisionElements pDecision;
	private IncomingElements pIncoming;
	private OutgoingElements pOutgoing;
	private ActionElements pAction;
	private SubprocessElements pSubprocess;
	private StartElements pStart;
	private EndElements pEnd;
	private ArtefactElements pArtefact;
	private InteractionElements pInteraction;
	private InteractionArtefactElements pInteractionArtefact;
	private PolicyElements pPolicy;
	private ObjectObligationElements pObjectObligation;
	private RoleObligationElements pRoleObligation;
	private ObjectPermissionElements pObjectPermission;
	private RolePermissionElements pRolePermission;
	private ObjectProhibitionElements pObjectProhibition;
	private RoleProhibitionElements pRoleProhibition;
	private IV_specElements pIV_spec;
	private InvariantSchemaElements pInvariantSchema;
	private DynamicSchemaElements pDynamicSchema;
	private StaticSchemaElements pStaticSchema;
	private ObjectInstanceElements pObjectInstance;
	private PropertyInstanceElements pPropertyInstance;
	private ActionTypeElements pActionType;
	private ActionPropertyElements pActionProperty;
	private CV_specElements pCV_spec;
	private NV_specElements pNV_spec;
	private HostNodeElements pHostNode;
	private LinkElements pLink;
	private TV_specElements pTV_spec;
	private ImplementableStandardElements pImplementableStandard;
	private IXITElements pIXIT;
	private Corr_specElements pCorr_spec;
	private EndPointElements pEndPoint;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public RmOdpGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//
	//	elements+=ModelElement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ModelElement:
	//
	//	Type | Object | PackageDeclaration | Import | Spec;
	public ModelElementElements getModelElementAccess() {
		return (pModelElement != null) ? pModelElement : (pModelElement = new ModelElementElements());
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	//Type:
	//
	//	SimpleType | Enumeration;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//SimpleType:
	//
	//	"type" name=QualifiedName ("extends" superType=[SimpleType])? ("{" properties+=Property* "}")?;
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//Enumeration:
	//
	//	"enum" name=QualifiedName "{" valueItems+=STRING* "}";
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//Import:
	//
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//PackageDeclaration:
	//
	//	"package" name=QualifiedName "{" elements+=ModelElement* "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Spec:
	//
	//	EV_spec | IV_spec | CV_spec | NV_spec | TV_spec | Corr_spec;
	public SpecElements getSpecAccess() {
		return (pSpec != null) ? pSpec : (pSpec = new SpecElements());
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}

	//Object:
	//
	//	ObjectType=("EV_Object" | "IV_Object" | "CV_Object" | "NV_Object" | "TV_Object") name=QualifiedName ("extends"
	//
	//	superObject=[Object|QualifiedName])? "{" properties+=Property* ("{" stateMachine=StateMachine "}")?
	//
	//	interfaces+=Interface* ("<" innerObjects+=Object+ ">")? ("implementing" nvObject=[Object|QualifiedName])? "}";
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//Property:
	//
	//	"property" name=QualifiedName ":" type=[ModelElement|QualifiedName] many?="[]"?;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//StateMachine:
	//
	//	"events" events+=Event+ "end" "commands" commands+=Command+ "end" states+=State+;
	public StateMachineElements getStateMachineAccess() {
		return (pStateMachine != null) ? pStateMachine : (pStateMachine = new StateMachineElements());
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//Event:
	//
	//	name=QualifiedName;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Command:
	//
	//	name=QualifiedName;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//State:
	//
	//	"state" name=QualifiedName ("actions" "{" actions+=[Command]+ "}")? stateTransitions+=StateTransition* "end";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//StateTransition:
	//
	//	event=[Event] "=>" state=[State];
	public StateTransitionElements getStateTransitionAccess() {
		return (pStateTransition != null) ? pStateTransition : (pStateTransition = new StateTransitionElements());
	}
	
	public ParserRule getStateTransitionRule() {
		return getStateTransitionAccess().getRule();
	}

	//Interface:
	//
	//	interfaceType=("CV_StreamInterface" | "CV_OperationInterface" | "CV_SignalInterface" | "NV_StreamInterface" |
	//
	//	"NV_OperationInterface" | "NV_SignalInterface") name=QualifiedName ("{" signatureReferences+=SignatureReference*
	//
	//	"}")?;
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//SignatureReference:
	//
	//	role=("providing" | "using") ref=[SignatureDef];
	public SignatureReferenceElements getSignatureReferenceAccess() {
		return (pSignatureReference != null) ? pSignatureReference : (pSignatureReference = new SignatureReferenceElements());
	}
	
	public ParserRule getSignatureReferenceRule() {
		return getSignatureReferenceAccess().getRule();
	}

	//SignatureDef:
	//
	//	signatureType=("CV_SignalInterfaceSignature" | "CV_StreamInterfaceSignature" | "CV_OperationInterfaceSignature" |
	//
	//	"CV_FlowSignature" | "NV_SignalInterfaceSignature" | "NV_StreamInterfaceSignature" | "NV_OperationInterfaceSignature"
	//
	//	| "NV_FlowSignature") name=QualifiedName "{" params+=Param* "}";
	public SignatureDefElements getSignatureDefAccess() {
		return (pSignatureDef != null) ? pSignatureDef : (pSignatureDef = new SignatureDefElements());
	}
	
	public ParserRule getSignatureDefRule() {
		return getSignatureDefAccess().getRule();
	}

	//Param:
	//
	//	"parameter" direction=("in" | "out" | "inout") name=QualifiedName ":" type=[Type];
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	//
	//EV_spec:
	//
	//	"enterprise" name=QualifiedName "{" foa=FieldOfApplication globalObjects+=Object*
	//
	//	communityContracts+=CommunityContract+ "}";
	public EV_specElements getEV_specAccess() {
		return (pEV_spec != null) ? pEV_spec : (pEV_spec = new EV_specElements());
	}
	
	public ParserRule getEV_specRule() {
		return getEV_specAccess().getRule();
	}

	//CommunityContract:
	//
	//	"EV_CommunityContract" name=QualifiedName "{" objective=Objective community=Community "}";
	public CommunityContractElements getCommunityContractAccess() {
		return (pCommunityContract != null) ? pCommunityContract : (pCommunityContract = new CommunityContractElements());
	}
	
	public ParserRule getCommunityContractRule() {
		return getCommunityContractAccess().getRule();
	}

	//Community:
	//
	//	"EV_Community" name=QualifiedName "{" localObjects+=Object* roles+=Role* or_relations+=OR_Relation*
	//
	//	processes+=Process* interactions+=Interaction* policies+=Policy* "}";
	public CommunityElements getCommunityAccess() {
		return (pCommunity != null) ? pCommunity : (pCommunity = new CommunityElements());
	}
	
	public ParserRule getCommunityRule() {
		return getCommunityAccess().getRule();
	}

	//FieldOfApplication:
	//
	//	"EV_FieldOfApplication" foa=STRING;
	public FieldOfApplicationElements getFieldOfApplicationAccess() {
		return (pFieldOfApplication != null) ? pFieldOfApplication : (pFieldOfApplication = new FieldOfApplicationElements());
	}
	
	public ParserRule getFieldOfApplicationRule() {
		return getFieldOfApplicationAccess().getRule();
	}

	//Objective:
	//
	//	"EV_Objective" name=QualifiedName objective=STRING ("{" subobj+=Objective+ "}")?;
	public ObjectiveElements getObjectiveAccess() {
		return (pObjective != null) ? pObjective : (pObjective = new ObjectiveElements());
	}
	
	public ParserRule getObjectiveRule() {
		return getObjectiveAccess().getRule();
	}

	//// More elements other than 'delegates to' need to be introduced. //
	//
	//Role:
	//
	//	"EV_Role" name=QualifiedName ("delegates to" target=[Role|QualifiedName])?;
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//OR_Relation:
	//
	//	"EV_Object" object=[Object|QualifiedName] "fufills" role=[Role|QualifiedName] "EV_Role";
	public OR_RelationElements getOR_RelationAccess() {
		return (pOR_Relation != null) ? pOR_Relation : (pOR_Relation = new OR_RelationElements());
	}
	
	public ParserRule getOR_RelationRule() {
		return getOR_RelationAccess().getRule();
	}

	//Process:
	//
	//	"EV_Process" name=QualifiedName ("{" ("Objective" processObjective=[Objective|QualifiedName])? lanes+=Lane* "}")?;
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//Lane:
	//
	//	"EV_Role" role=[Role|QualifiedName] "{" nodes+=Node* "}";
	public LaneElements getLaneAccess() {
		return (pLane != null) ? pLane : (pLane = new LaneElements());
	}
	
	public ParserRule getLaneRule() {
		return getLaneAccess().getRule();
	}

	//Node:
	//
	//	Decision | Action | Subprocess | Start | End | Artefact;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//Decision:
	//
	//	"decision" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}";
	public DecisionElements getDecisionAccess() {
		return (pDecision != null) ? pDecision : (pDecision = new DecisionElements());
	}
	
	public ParserRule getDecisionRule() {
		return getDecisionAccess().getRule();
	}

	//Incoming:
	//
	//	{Incoming} "incoming" incoming+=[Node|QualifiedName]* inCondition=STRING?;
	public IncomingElements getIncomingAccess() {
		return (pIncoming != null) ? pIncoming : (pIncoming = new IncomingElements());
	}
	
	public ParserRule getIncomingRule() {
		return getIncomingAccess().getRule();
	}

	//Outgoing:
	//
	//	{Outgoing} "outgoing" outgoing+=[Node|QualifiedName]* outCondition=STRING?;
	public OutgoingElements getOutgoingAccess() {
		return (pOutgoing != null) ? pOutgoing : (pOutgoing = new OutgoingElements());
	}
	
	public ParserRule getOutgoingRule() {
		return getOutgoingAccess().getRule();
	}

	//Action:
	//
	//	"EV_Step" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}";
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Subprocess:
	//
	//	"subprocess" name=QualifiedName "{" incomings+=Incoming* outgoings+=Outgoing* "}";
	public SubprocessElements getSubprocessAccess() {
		return (pSubprocess != null) ? pSubprocess : (pSubprocess = new SubprocessElements());
	}
	
	public ParserRule getSubprocessRule() {
		return getSubprocessAccess().getRule();
	}

	//Start:
	//
	//	"start" name=QualifiedName "{" "outgoing" outgoing+=[Node|QualifiedName]* "}";
	public StartElements getStartAccess() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//End:
	//
	//	"end" name=QualifiedName "{" incomings+=Incoming* "}";
	public EndElements getEndAccess() {
		return (pEnd != null) ? pEnd : (pEnd = new EndElements());
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}

	//Artefact:
	//
	//	"EV_Artefact" name=QualifiedName "{" ("incoming" incoming=[Node|QualifiedName])? ("outgoing"
	//
	//	outgoing=[Node|QualifiedName])? "}";
	public ArtefactElements getArtefactAccess() {
		return (pArtefact != null) ? pArtefact : (pArtefact = new ArtefactElements());
	}
	
	public ParserRule getArtefactRule() {
		return getArtefactAccess().getRule();
	}

	//Interaction:
	//
	//	"EV_Interaction" name=QualifiedName ("{" ("Process" process_def=[Process|QualifiedName])? "EV_InteractionInitiator"
	//
	//	initiator=[Role|QualifiedName] "{" initiator_statemachine=StateMachine "}" "EV_InteractionResponder"
	//
	//	responder=[Role|QualifiedName] "{" responder_statemachine=StateMachine "}" interactionArtefacts+=InteractionArtefact*
	//
	//	"}")?;
	public InteractionElements getInteractionAccess() {
		return (pInteraction != null) ? pInteraction : (pInteraction = new InteractionElements());
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}

	//InteractionArtefact:
	//
	//	"EV_Artefact" name=QualifiedName "from" fromRole=[Role|QualifiedName] "to" toRole=[Role|QualifiedName];
	public InteractionArtefactElements getInteractionArtefactAccess() {
		return (pInteractionArtefact != null) ? pInteractionArtefact : (pInteractionArtefact = new InteractionArtefactElements());
	}
	
	public ParserRule getInteractionArtefactRule() {
		return getInteractionArtefactAccess().getRule();
	}

	//// PolicyEnvelop has one current PolicyValue, but does the one PolicyValue mean exactly one policy statement? //
	//
	//Policy:
	//
	//	"EV_PolicyEnvelop" name=QualifiedName "{" "EV_PolicyValue" policy=STRING "{" obligations+=ObjectObligation*
	//
	//	obligations+=RoleObligation* permissions+=ObjectPermission* permissions+=RolePermission*
	//
	//	prohibitions+=ObjectProhibition* prohibitions+=RoleProhibition* "}" "EV_ControllingBehavior" "{"
	//
	//	process=[Process|QualifiedName] "}" "EV_AffectedBehavior {" affectedRole+=Role* affectedProcess+=Process*
	//
	//	affectedInteraction+=Interaction* "}" "}";
	public PolicyElements getPolicyAccess() {
		return (pPolicy != null) ? pPolicy : (pPolicy = new PolicyElements());
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}

	//ObjectObligation:
	//
	//	"obligation" name=QualifiedName ":" inforce?="current"? "EV_Object" objo=[Object] "is obligated to"
	//
	//	object_obligation=STRING;
	public ObjectObligationElements getObjectObligationAccess() {
		return (pObjectObligation != null) ? pObjectObligation : (pObjectObligation = new ObjectObligationElements());
	}
	
	public ParserRule getObjectObligationRule() {
		return getObjectObligationAccess().getRule();
	}

	//RoleObligation:
	//
	//	"obligation" name=QualifiedName ":" inforce?="current"? "EV_Role" roleo=[Role|QualifiedName] "is obligated to"
	//
	//	role_obligation=STRING;
	public RoleObligationElements getRoleObligationAccess() {
		return (pRoleObligation != null) ? pRoleObligation : (pRoleObligation = new RoleObligationElements());
	}
	
	public ParserRule getRoleObligationRule() {
		return getRoleObligationAccess().getRule();
	}

	//ObjectPermission:
	//
	//	"permission" name=QualifiedName ":" inforce?="current"? "EV_Object" objp=[Object|QualifiedName] "is permitted to"
	//
	//	object_permission=STRING;
	public ObjectPermissionElements getObjectPermissionAccess() {
		return (pObjectPermission != null) ? pObjectPermission : (pObjectPermission = new ObjectPermissionElements());
	}
	
	public ParserRule getObjectPermissionRule() {
		return getObjectPermissionAccess().getRule();
	}

	//RolePermission:
	//
	//	"permission" name=QualifiedName ":" inforce?="current"? "EV_Role" rolep=[Role|QualifiedName] "is permitted to"
	//
	//	role_permission=STRING;
	public RolePermissionElements getRolePermissionAccess() {
		return (pRolePermission != null) ? pRolePermission : (pRolePermission = new RolePermissionElements());
	}
	
	public ParserRule getRolePermissionRule() {
		return getRolePermissionAccess().getRule();
	}

	//ObjectProhibition:
	//
	//	"prohibition" name=QualifiedName ":" inforce?="current"? "EV_Object" objp=[Object|QualifiedName] "is prohibited to"
	//
	//	object_prohibition=STRING;
	public ObjectProhibitionElements getObjectProhibitionAccess() {
		return (pObjectProhibition != null) ? pObjectProhibition : (pObjectProhibition = new ObjectProhibitionElements());
	}
	
	public ParserRule getObjectProhibitionRule() {
		return getObjectProhibitionAccess().getRule();
	}

	//RoleProhibition:
	//
	//	"prohibition" name=QualifiedName ":" inforce?="current"? "EV_Role" rolep=[Role|QualifiedName] "is prohibited to"
	//
	//	role_prohibition=STRING;
	public RoleProhibitionElements getRoleProhibitionAccess() {
		return (pRoleProhibition != null) ? pRoleProhibition : (pRoleProhibition = new RoleProhibitionElements());
	}
	
	public ParserRule getRoleProhibitionRule() {
		return getRoleProhibitionAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	//
	//IV_spec:
	//
	//	"information" name=QualifiedName "{" invariantSchema+=InvariantSchema* dynamicSchema+=DynamicSchema*
	//
	//	staticSchema+=StaticSchema* "}";
	public IV_specElements getIV_specAccess() {
		return (pIV_spec != null) ? pIV_spec : (pIV_spec = new IV_specElements());
	}
	
	public ParserRule getIV_specRule() {
		return getIV_specAccess().getRule();
	}

	//InvariantSchema:
	//
	//	"invariant schema" name=QualifiedName "{" objects+=Object* actionTypes+=ActionType* "}";
	public InvariantSchemaElements getInvariantSchemaAccess() {
		return (pInvariantSchema != null) ? pInvariantSchema : (pInvariantSchema = new InvariantSchemaElements());
	}
	
	public ParserRule getInvariantSchemaRule() {
		return getInvariantSchemaAccess().getRule();
	}

	//DynamicSchema:
	//
	//	"dynamic schema" name=QualifiedName "{" stateMachine=StateMachine "}";
	public DynamicSchemaElements getDynamicSchemaAccess() {
		return (pDynamicSchema != null) ? pDynamicSchema : (pDynamicSchema = new DynamicSchemaElements());
	}
	
	public ParserRule getDynamicSchemaRule() {
		return getDynamicSchemaAccess().getRule();
	}

	//StaticSchema:
	//
	//	"static schema" name=QualifiedName "{" "locationInTime" ":" time=STRING objectInstances+=ObjectInstance* "}";
	public StaticSchemaElements getStaticSchemaAccess() {
		return (pStaticSchema != null) ? pStaticSchema : (pStaticSchema = new StaticSchemaElements());
	}
	
	public ParserRule getStaticSchemaRule() {
		return getStaticSchemaAccess().getRule();
	}

	//ObjectInstance:
	//
	//	"instance" typeName=[Object|QualifiedName] name=QualifiedName "{" propertyInstances+=PropertyInstance* "}";
	public ObjectInstanceElements getObjectInstanceAccess() {
		return (pObjectInstance != null) ? pObjectInstance : (pObjectInstance = new ObjectInstanceElements());
	}
	
	public ParserRule getObjectInstanceRule() {
		return getObjectInstanceAccess().getRule();
	}

	//PropertyInstance:
	//
	//	typeProperty=[Property|QualifiedName] ":" propertyValue=STRING;
	public PropertyInstanceElements getPropertyInstanceAccess() {
		return (pPropertyInstance != null) ? pPropertyInstance : (pPropertyInstance = new PropertyInstanceElements());
	}
	
	public ParserRule getPropertyInstanceRule() {
		return getPropertyInstanceAccess().getRule();
	}

	//ActionType:
	//
	//	"action type" name=QualifiedName "{" actionTypes+=ActionProperty* "}";
	public ActionTypeElements getActionTypeAccess() {
		return (pActionType != null) ? pActionType : (pActionType = new ActionTypeElements());
	}
	
	public ParserRule getActionTypeRule() {
		return getActionTypeAccess().getRule();
	}

	//ActionProperty:
	//
	//	"action property" name=QualifiedName ":" type=[ModelElement|QualifiedName] many?="[]"?;
	public ActionPropertyElements getActionPropertyAccess() {
		return (pActionProperty != null) ? pActionProperty : (pActionProperty = new ActionPropertyElements());
	}
	
	public ParserRule getActionPropertyRule() {
		return getActionPropertyAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	//
	//CV_spec:
	//
	//	"computational" name=QualifiedName "{" cdatatypes+=Type* signatureDefs+=SignatureDef* objects+=Object* "}";
	public CV_specElements getCV_specAccess() {
		return (pCV_spec != null) ? pCV_spec : (pCV_spec = new CV_specElements());
	}
	
	public ParserRule getCV_specRule() {
		return getCV_specAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	//
	//NV_spec:
	//
	//	"engineering" name=QualifiedName "{" hostNode+=HostNode* "}";
	public NV_specElements getNV_specAccess() {
		return (pNV_spec != null) ? pNV_spec : (pNV_spec = new NV_specElements());
	}
	
	public ParserRule getNV_specRule() {
		return getNV_specAccess().getRule();
	}

	//HostNode:
	//
	//	"node" name=QualifiedName "{" link+=Link* signatureDefs+=SignatureDef* objects+=Object* "}";
	public HostNodeElements getHostNodeAccess() {
		return (pHostNode != null) ? pHostNode : (pHostNode = new HostNodeElements());
	}
	
	public ParserRule getHostNodeRule() {
		return getHostNodeAccess().getRule();
	}

	//Link:
	//
	//	"link" name=QualifiedName ":" hostNode=[HostNode|QualifiedName];
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	//
	//TV_spec:
	//
	//	"technology" name=QualifiedName "{" objects+=Object* implementableStandards+=ImplementableStandard* ixits+=IXIT* "}";
	public TV_specElements getTV_specAccess() {
		return (pTV_spec != null) ? pTV_spec : (pTV_spec = new TV_specElements());
	}
	
	public ParserRule getTV_specRule() {
		return getTV_specAccess().getRule();
	}

	//ImplementableStandard:
	//
	//	"implementable standard" name=QualifiedName;
	public ImplementableStandardElements getImplementableStandardAccess() {
		return (pImplementableStandard != null) ? pImplementableStandard : (pImplementableStandard = new ImplementableStandardElements());
	}
	
	public ParserRule getImplementableStandardRule() {
		return getImplementableStandardAccess().getRule();
	}

	//IXIT:
	//
	//	"IXIT" description=STRING;
	public IXITElements getIXITAccess() {
		return (pIXIT != null) ? pIXIT : (pIXIT = new IXITElements());
	}
	
	public ParserRule getIXITRule() {
		return getIXITAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	//
	//Corr_spec:
	//
	//	"correspondence" name=QualifiedName "{" "from:" viewpoint1=("enterprise" | "information" | "computational" |
	//
	//	"engineering" | "technololgy") "{" endpoints1+=EndPoint* "}" "to:" viewpoint2=("enterprise" | "information" |
	//
	//	"computational" | "engineering" | "technololgy") "{" endpoints2+=EndPoint* "}" "description" description=STRING "}";
	public Corr_specElements getCorr_specAccess() {
		return (pCorr_spec != null) ? pCorr_spec : (pCorr_spec = new Corr_specElements());
	}
	
	public ParserRule getCorr_specRule() {
		return getCorr_specAccess().getRule();
	}

	//EndPoint:
	//
	//	"endpoint" type=[ModelElement|QualifiedName];
	public EndPointElements getEndPointAccess() {
		return (pEndPoint != null) ? pEndPoint : (pEndPoint = new EndPointElements());
	}
	
	public ParserRule getEndPointRule() {
		return getEndPointAccess().getRule();
	}

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//
	//
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//
	//
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	// StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
